${database.allClassCopyright}package ${glPackageBaseCommonBhv};

#set ($myClassName = "${glAbstractBehaviorWritable}")
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

import ${glPackageBaseCommon}.${glEntity};
import ${glPackageBaseCommon}.${glCommonColumnAutoSetupper};
import ${glPackageBaseCommonBhvCoreCommand}.${glAbstractEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glAbstractListEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glInsertEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glUpdateEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glUpdateNonstrictEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glDeleteEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glDeleteNonstrictEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glBatchInsertEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glBatchUpdateEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glBatchUpdateNonstrictEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glBatchDeleteEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glBatchDeleteNonstrictEntityCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glQueryDeleteCBCommand};
import ${glPackageBaseCommonBhvCoreCommand}.${glQueryUpdateEntityCBCommand};
import ${glPackageBaseCommonCBean}.${glConditionBean};
import ${glPackageBaseCommonDBMeta}.${glDBMeta};
import ${glPackageBaseCommonHelper}.${glMapStringBuilder};
import ${glPackageBaseCommonHelper}.${glMapStringBuilderImpl};

import ${glPackageBaseCommonBhvBatch}.${glTokenFileReflectionOption};
import ${glPackageBaseCommonBhvBatch}.${glTokenFileReflectionResult};
import ${glPackageBaseCommonBhvBatch}.${glTokenFileReflectionFailure};

import ${glPackageBaseCommonHelperTokenFile}.${glFileToken};
import ${glPackageBaseCommonHelperTokenFile}.${glFileTokenizingCallback};
import ${glPackageBaseCommonHelperTokenFile}.${glFileTokenizingRowResource};
import ${glPackageBaseCommonHelperTokenFile}.${glFileTokenizingHeaderInfo};
import ${glPackageBaseCommonHelperTokenFile}.${glFileTokenizingOption};
import ${glPackageBaseCommonHelperTokenFileImpl}.${glFileTokenImpl};

/**
 * The abstract class of writable behavior.
 * @author ${database.ClassAuthor}
 */
public abstract class ${myClassName} extends ${glAbstractBehaviorReadable} implements ${glBehaviorWritable} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Map-string map-mark. */
    private static final String MAP_STRING_MAP_MARK = "map:";

    /** Map-string start-brace. */
    private static final String MAP_STRING_START_BRACE = "${database.extractAcceptStartBrace}";

    /** Map-string end-brace. */
    private static final String MAP_STRING_END_BRACE = "${database.extractAcceptEndBrace}";

    /** Map-string delimiter. */
    private static final String MAP_STRING_DELIMITER = "${database.extractAcceptDelimiter}";

    /** Map-string equal. */
    private static final String MAP_STRING_EQUAL = "${database.extractAcceptEqual}";

    // =====================================================================================
    //                                                                             Attribute
    //                                                                             =========
    protected ${glCommonColumnAutoSetupper} _commonColumnAutoSetupper;

    // ===================================================================================
    //                                                                       Entity Update
    //                                                                       =============
    // -----------------------------------------------------
    //                                                Create
    //                                                ------
    /**
     * Create.
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyExistsException} When the entity already exists. (Unique Constraint Violation)
     */
    public void create(${glEntity} entity) {
        doCreate(entity);
    }

    protected abstract void doCreate(${glEntity} entity);

    // -----------------------------------------------------
    //                                                Modify
    //                                                ------
    /**
     * Modify.
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} When the entity has already been updated.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyExistsException} When the entity already exists. (Unique Constraint Violation)
     */
    public void modify(${glEntity} entity) {
        doModify(entity);
    }

    protected abstract void doModify(${glEntity} entity);

    /**
     * Modify non strict.
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyExistsException} When the entity already exists. (Unique Constraint Violation)
     */
    public void modifyNonstrict(${glEntity} entity) {
        doModifyNonstrict(entity);
    }

    protected abstract void doModifyNonstrict(${glEntity} entity);

    // -----------------------------------------------------
    //                                      Create or Modify
    //                                      ----------------
    /**
     * ${database.ImplementComment}
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} When the entity has already been updated.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyExistsException} When the entity already exists. (Unique Constraint Violation)
     */
    public void createOrModify(${glPackageBaseCommon}.${glEntity} entity) {
        assertEntityNotNull(entity);
        doCreateOrUpdate(entity);
    }

    protected abstract void doCreateOrUpdate(${glEntity} entity);

    /**
     * ${database.ImplementComment}
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyExistsException} When the entity already exists. (Unique Constraint Violation)
     */
    public void createOrModifyNonstrict(${glPackageBaseCommon}.${glEntity} entity) {
        assertEntityNotNull(entity);
        doCreateOrUpdateNonstrict(entity);
    }

    protected abstract void doCreateOrUpdateNonstrict(${glEntity} entity);

    // -----------------------------------------------------
    //                                                Remove
    //                                                ------
    /**
     * Remove.
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} When the entity has already been updated.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public void remove(${glPackageBaseCommon}.${glEntity} entity) {
        assertEntityNotNull(entity);
        callRemove(entity);
    }

    protected abstract void doRemove(${glEntity} entity);

    // ===================================================================================
    //                                                       Entity Update Internal Helper
    //                                                       =============================
    // -----------------------------------------------------
    //                                                Update
    //                                                ------
    protected <ENTITY extends ${glEntity}> void helpUpdateInternally(ENTITY entity, InternalUpdateCallback<ENTITY> callback) {
        assertEntityNotNull(entity);
        assertEntityHasVersionNoValue(entity);
        assertEntityHasUpdateDateValue(entity);
        final int updatedCount = callback.callbackDelegateUpdate(entity);
        if (updatedCount == 0) {
            String msg = "The entity was Not Found! it has already been deleted: entity=" + entity;
            throw new ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}(msg);
        } else if (updatedCount > 1) {
            String msg = "The entity was Too Many! it has been duplicated. It should be the only one! But the updatedCount=" + updatedCount;
            msg = msg + ": entity=" + entity;
            throw new ${glPackageBaseCommonException}.${glEntityDuplicatedException}(msg);
        }
    }

    protected static interface InternalUpdateCallback<ENTITY extends ${glEntity}> {
        public int callbackDelegateUpdate(ENTITY entity);
    }

    protected <ENTITY extends ${glEntity}> void helpUpdateNonstrictInternally(ENTITY entity, InternalUpdateNonstrictCallback<ENTITY> callback) {
        assertEntityNotNull(entity);
        final int updatedCount = callback.callbackDelegateUpdateNonstrict(entity);
        if (updatedCount == 0) {
            String msg = "The entity was Not Found! it has already been deleted: entity=" + entity;
            throw new ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}(msg);
        } else if (updatedCount > 1) {
            String msg = "The entity was Too Many! it has been duplicated. It should be the only one! But the updatedCount=" + updatedCount;
            msg = msg + ": entity=" + entity;
        }
    }

    protected static interface InternalUpdateNonstrictCallback<ENTITY extends ${glEntity}> {
        public int callbackDelegateUpdateNonstrict(ENTITY entity);
    }

    // -----------------------------------------------------
    //                                        InsertOrUpdate
    //                                        --------------
    protected <ENTITY extends ${glEntity}, CB_TYPE extends ${glConditionBean}>
            void helpInsertOrUpdateInternally(ENTITY entity, InternalInsertOrUpdateCallback<ENTITY, CB_TYPE> callback) {
        assertEntityNotNull(entity);
        if (!entity.hasPrimaryKeyValue()) {
            callback.callbackInsert(entity);
        } else {
            RuntimeException exception = null;
            try {
                callback.callbackUpdate(entity);
            } catch (${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} e) {
                if (e.getRows() == 0) {
                    exception = e;
                }
            } catch (${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} e) {
                exception = e;
            } catch (OptimisticLockColumnValueNullException e) {
                exception = e;
            }
            if (exception != null) {
                final CB_TYPE cb = callback.callbackNewMyConditionBean();
                cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(entity));
                if (callback.callbackSelectCount(cb) == 0) {
                    callback.callbackInsert(entity);
                } else {
                    throw exception;
                }
            }
        }
    }

    protected static interface InternalInsertOrUpdateCallback<ENTITY extends ${glEntity}, CB_TYPE extends ${glConditionBean}> {
        public void callbackInsert(ENTITY entity);
        public void callbackUpdate(ENTITY entity);
        public CB_TYPE callbackNewMyConditionBean();
        public int callbackSelectCount(CB_TYPE cb);
    }

    protected <ENTITY extends ${glEntity}> void helpInsertOrUpdateInternally(ENTITY entity, InternalInsertOrUpdateNonstrictCallback<ENTITY> callback) {
        assertEntityNotNull(entity);
        if (!entity.hasPrimaryKeyValue()) {
            callback.callbackInsert(entity);
        } else {
            try {
                callback.callbackUpdateNonstrict(entity);
            } catch (${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} e) {
                callback.callbackInsert(entity);
            } catch (${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} e) {
                callback.callbackInsert(entity);
            }
        }
    }

    protected static interface InternalInsertOrUpdateNonstrictCallback<ENTITY extends ${glEntity}> {
        public void callbackInsert(ENTITY entity);
        public void callbackUpdateNonstrict(ENTITY entity);
    }

    // -----------------------------------------------------
    //                                                Delete
    //                                                ------
    protected <ENTITY extends ${glEntity}> void helpDeleteInternally(ENTITY entity, InternalDeleteCallback<ENTITY> callback) {
        assertEntityNotNull(entity);
        assertEntityHasVersionNoValue(entity);
        assertEntityHasUpdateDateValue(entity);
        final int deletedCount = callback.callbackDelegateDelete(entity);
        if (deletedCount == 0) {
            String msg = "The entity was Not Found! The entity has already been deleted: entity=" + entity;
            throw new ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}(msg);
        } else if (deletedCount > 1) {
            String msg = "The deleted entity was duplicated. It should be the only one! But the deletedCount=" + deletedCount;
            msg = msg + ": entity=" + entity;
            throw new ${glPackageBaseCommonException}.${glEntityDuplicatedException}(msg);
        }
    }

    protected static interface InternalDeleteCallback<ENTITY extends ${glEntity}> {
        public int callbackDelegateDelete(ENTITY entity);
    }

    protected <ENTITY extends ${glEntity}> void helpDeleteNonstrictInternally(ENTITY entity, InternalDeleteNonstrictCallback<ENTITY> callback) {
        assertEntityNotNull(entity);
        final int deletedCount = callback.callbackDelegateDeleteNonstrict(entity);
        if (deletedCount == 0) {
            String msg = "The entity was Not Found! The entity has already been deleted: entity=" + entity;
            throw new ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}(msg);
        } else if (deletedCount > 1) {
            String msg = "The deleted entity was duplicated. It should be the only one! But the deletedCount=" + deletedCount;
            msg = msg + ": entity=" + entity;
            throw new ${glPackageBaseCommonException}.${glEntityDuplicatedException}(msg);
        }
    }

    protected static interface InternalDeleteNonstrictCallback<ENTITY extends ${glEntity}> {
        public int callbackDelegateDeleteNonstrict(ENTITY entity);
    }

    protected <ENTITY extends ${glEntity}> void helpDeleteNonstrictIgnoreDeletedInternally(ENTITY entity, InternalDeleteNonstrictIgnoreDeletedCallback<ENTITY> callback) {
        assertEntityNotNull(entity);
        final int deletedCount = callback.callbackDelegateDeleteNonstrict(entity);
        if (deletedCount == 0) {
            return;
        } else if (deletedCount > 1) {
            String msg = "The deleted entity was duplicated. It should be the only one! But the deletedCount=" + deletedCount;
            msg = msg + ": entity=" + entity;
            throw new ${glPackageBaseCommonException}.${glEntityDuplicatedException}(msg);
        }
    }

    protected static interface InternalDeleteNonstrictIgnoreDeletedCallback<ENTITY extends ${glEntity}> {
        public int callbackDelegateDeleteNonstrict(ENTITY entity);
    }

    // ===================================================================================
    //                                                                         Lump Update
    //                                                                         ===========
    /**
     * Lump create the list.
     * @param entityList Entity list. (NotNull and NotEmpty)
     * @return The array of created count.
     */
    public int[] lumpCreate(List<${glEntity}> entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return callCreateList(entityList);
    }

    /**
     * Lump Modify the list.
     * @param entityList Entity list. (NotNull and NotEmpty)
     * @return Modified count.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} If s2dao's version is over 1.0.47 (contains 1.0.47).
     */
    public int[] lumpModify(List<${glEntity}> entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return callModifyList(entityList);
    }

    /**
     * Lump remove the list.
     * @param entityList Entity list. (NotNull and NotEmpty)
     * @return Removed count.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} If s2dao's version is over 1.0.47 (contains 1.0.47).
     */
    public int[] lumpRemove(List<${glEntity}> entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return callRemoveList(entityList);
    }

    /**
     * Inject sequence to primary key if it needs.
     * @param entity Entity. (NotNull)
     */
    protected void injectSequenceToPrimaryKeyIfNeeds(${glEntity} entity) {
        final ${glDBMeta} dbmeta = entity.getDBMeta();
        if (!dbmeta.hasSequence() || dbmeta.hasTwoOrMorePrimaryKeys() || entity.hasPrimaryKeyValue()) {
            return;
        }
        final ${database.sequenceReturnType} sequenceValue = readNextVal();
        final String columnDbName = dbmeta.getPrimaryUniqueInfo().getFirstColumn().getColumnDbName();
        final java.util.Map${database.filterGenericsString('String, String')} map = new java.util.HashMap${database.filterGenericsString('String, String')}();
        map.put(columnDbName, sequenceValue.toString());
        dbmeta.acceptPrimaryKeyMap(entity, map);
    }

    // =====================================================================================
    //                                                                            Token File
    //                                                                            ==========
    /**
     * Get the executor of token file reflection.
     * @return The executor of token file output. (NotNull)
     */
    public TokenFileReflectionExecutor tokenFileReflection() {
        return new TokenFileReflectionExecutor();
    }

    /**
     * The executor of token file reflection.
     */
    public class TokenFileReflectionExecutor {

        /**
         * Reflect(insert or update) token file to this table. <br />
         * The supported column types are String, Number and Date.
         * @param filename The name of the file. (NotNull and NotEmpty)
         * @param tokenFileReflectionOption token-file-reflection-option. (NotNull and Required{delimiter and encoding})
         * @return The result of token file reflection. (NotNull)
         * @throws java.io.FileNotFoundException The file is not found.
         * @throws java.io.IOException The IO exception occurred.
         */
        public ${glTokenFileReflectionResult} reflectTokenFile(String filename, ${glTokenFileReflectionOption} tokenFileReflectionOption) throws java.io.FileNotFoundException, java.io.IOException {
            assertStringNotNullAndNotTrimmedEmpty("filename", filename);
            assertFileTokenReflectionOption(tokenFileReflectionOption);

            final ${glTokenFileReflectionResult} result = buildTokenFileReflectionResult();
            final ${glFileTokenizingCallback} fileTokenizingCallback = buildFileTokenReflectionFileTokenizingCallback(tokenFileReflectionOption, result);
            final ${glFileTokenizingOption} fileTokenizingOption = buildFileTokenReflectionFileTokenizingOption(tokenFileReflectionOption);
            final ${glFileToken} fileToken = new ${glFileTokenImpl}();
            fileToken.tokenize(filename, fileTokenizingCallback, fileTokenizingOption);
            return result;
        }

        /**
         * Reflect(insert or update) token file to this table. <br />
         * The supported column types are String, Number and Date.
         * @param inputStream The input stream. (NotNull and NotClosed)
         * @param tokenFileReflectionOption token-file-reflection-option. (NotNull and Required{delimiter and encoding})
         * @return The result of token file reflection. (NotNull)
         * @throws java.io.FileNotFoundException The file is not found.
         * @throws java.io.IOException The IO exception occurred.
         */
        public ${glTokenFileReflectionResult} reflectTokenFile(java.io.InputStream inputStream, ${glTokenFileReflectionOption} tokenFileReflectionOption) throws java.io.FileNotFoundException, java.io.IOException {
            assertObjectNotNull("inputStream", inputStream);
            assertFileTokenReflectionOption(tokenFileReflectionOption);

            final ${glTokenFileReflectionResult} result = buildTokenFileReflectionResult();
            final ${glFileTokenizingCallback} fileTokenizingCallback = buildFileTokenReflectionFileTokenizingCallback(tokenFileReflectionOption, result);
            final ${glFileTokenizingOption} fileTokenizingOption = buildFileTokenReflectionFileTokenizingOption(tokenFileReflectionOption);
            final ${glFileToken} fileToken = new ${glFileTokenImpl}();
            fileToken.tokenize(inputStream, fileTokenizingCallback, fileTokenizingOption);
            return result;
        }

        protected void assertFileTokenReflectionOption(${glTokenFileReflectionOption} tokenFileReflectionOption) {
            assertObjectNotNull("tokenFileReflectionOption", tokenFileReflectionOption);

            final String encoding = tokenFileReflectionOption.getEncoding();
            final String delimiter = tokenFileReflectionOption.getDelimiter();
            assertStringNotNullAndNotTrimmedEmpty("encoding", encoding);
            assertObjectNotNull("delimiter", delimiter);
        }

        protected ${glTokenFileReflectionResult} buildTokenFileReflectionResult() {
            final ${glTokenFileReflectionResult} result = new ${glTokenFileReflectionResult}();
            final java.util.List<${glTokenFileReflectionFailure}> failureList = new java.util.ArrayList<${glTokenFileReflectionFailure}>();
            result.setFailureList(failureList);
            return result;
        }

        protected ${glFileTokenizingCallback} buildFileTokenReflectionFileTokenizingCallback(${glTokenFileReflectionOption} tokenFileReflectionOption, final ${glTokenFileReflectionResult} result) throws java.io.FileNotFoundException, java.io.IOException {
            assertObjectNotNull("tokenFileReflectionOption", tokenFileReflectionOption);

            final String encoding = tokenFileReflectionOption.getEncoding();
            final String delimiter = tokenFileReflectionOption.getDelimiter();
            final boolean interruptIfError = tokenFileReflectionOption.isInterruptIfError();
            assertStringNotNullAndNotTrimmedEmpty("encoding", encoding);
            assertObjectNotNull("delimiter", delimiter);
            final java.util.List<${glTokenFileReflectionFailure}> failureList = result.getFailureList();
            assertObjectNotNull("failureList", failureList);

            final ${glFileTokenizingCallback} fileTokenizingCallback = new ${glFileTokenizingCallback}() {
                public void handleRowResource(${glFileTokenizingRowResource} fileTokenizingRowResource) {
                    final ${glFileTokenizingHeaderInfo} fileTokenizingHeaderInfo = fileTokenizingRowResource.getFileTokenizingHeaderInfo();
                    final java.util.List<String> columnNameList = fileTokenizingHeaderInfo.getColumnNameList();
                    final java.util.List<String> valueList = fileTokenizingRowResource.getValueList();

                    // Set up columnNameList of result object.
                    if (result.getColumnNameList() == null) {
                        result.setColumnNameList(columnNameList);
                    }

                    ${glEntity} entity = null;
                    try {
                        // Create entity by the list of value composed of String.
                        entity = createEntityByStringValueList(columnNameList, valueList);

                        // Create or modify as non-strict.
                        doCreateOrUpdateNonstrict(entity);

                        // Increment successCount of result object.
                        result.incrementSuccessCount();
                    } catch (RuntimeException e) {
                        if (interruptIfError) {
                            throw e;
                        }
                        final ${glTokenFileReflectionFailure} failure = new ${glTokenFileReflectionFailure}();
                        failure.setColumnNameList(columnNameList);
                        failure.setValueList(valueList);
                        failure.setRowString(fileTokenizingRowResource.getRowString());
                        failure.setRowNumber(fileTokenizingRowResource.getRowNumber());
                        failure.setLineNumber(fileTokenizingRowResource.getLineNumber());
                        if (entity != null) {
                            failure.setEntity(entity);
                        }
                        failure.setException(e);
                        failureList.add(failure);
                    }
                }
            };
            return fileTokenizingCallback;
        }

        protected ${glEntity} createEntityByStringValueList(java.util.List<String> columnNameList, java.util.List<String> valueList) {
            final ${glMapStringBuilder} builder = new ${glMapStringBuilderImpl}();
            builder.setMsMapMark(MAP_STRING_MAP_MARK);
            builder.setMsStartBrace(MAP_STRING_START_BRACE);
            builder.setMsEndBrace(MAP_STRING_END_BRACE);
            builder.setMsDelimiter(MAP_STRING_DELIMITER);
            builder.setMsEqual(MAP_STRING_EQUAL);
            builder.setColumnNameList(columnNameList);
            final String mapString = builder.buildFromList(valueList);

            final ${glEntity} entity = getDBMeta().newEntity();
            getDBMeta().acceptColumnValueMapString(entity, mapString);
            return entity;
        }

        protected ${glFileTokenizingOption} buildFileTokenReflectionFileTokenizingOption(${glTokenFileReflectionOption} tokenFileReflectionOption) throws java.io.FileNotFoundException, java.io.IOException {
            assertObjectNotNull("tokenFileReflectionOption", tokenFileReflectionOption);

            final String encoding = tokenFileReflectionOption.getEncoding();
            final String delimiter = tokenFileReflectionOption.getDelimiter();
            assertStringNotNullAndNotTrimmedEmpty("encoding", encoding);
            assertObjectNotNull("delimiter", delimiter);

            final ${glFileTokenizingOption} fileTokenizingOption = new ${glFileTokenizingOption}();
            fileTokenizingOption.setEncoding(encoding);
            fileTokenizingOption.setDelimiter(delimiter);
            if (tokenFileReflectionOption.isHandleEmptyAsNull()) {
                fileTokenizingOption.handleEmptyAsNull();
            }
            return fileTokenizingOption;
        }
    }

    // =====================================================================================
    //                                                                       Delegate Method
    //                                                                       ===============
    // -----------------------------------------------------
    //                                                Insert
    //                                                ------
    /**
     * ${database.ImplementComment}
     * @param entity Entity that the type is entity interface. (NotNull)
     * @return Inserted count.
     */
    protected int callCreate(${glEntity} entity) {
        if (!processBeforeInsert(entity)) { return 1;/*as Normal End*/ }
        return doCallCreate(entity);
    }
    protected abstract int doCallCreate(${glEntity} entity);

    /**
     * Process before insert.
     * @param entity Entity that the type is entity interface. (NotNull)
     * @return Execution Determination. (true: execute / false: non)
     */
    protected boolean processBeforeInsert(${glEntity} entity) {
        if (!determineExecuteInsert(entity)) { return false; }
        assertEntityNotNull(entity);// If this table use identity, the entity does not have primary-key.
        frameworkFilterEntityOfInsert(entity);
        filterEntityOfInsert(entity);
        assertEntityOfInsert(entity);
        return true;
    }

    // -----------------------------------------------------
    //                                                Update
    //                                                ------
    /**
     * ${database.ImplementComment}
     * {modified only}
     * @param entity Entity that the type is entity interface. (NotNull)
     * @return Updated count.
     */
    protected int callModify(${glEntity} entity) {
        if (!processBeforeUpdate(entity)) { return 1;/*as Normal End*/ }
        return doCallModify(entity);
    }
    protected abstract int doCallModify(${glEntity} entity);

    /**
     * Process before update.
     * @param entity Entity that the type is entity interface. (NotNull)
     * @return Execution Determination. (true: execute / false: non)
     */
    protected boolean processBeforeUpdate(${glEntity} entity) {
        if (!determineExecuteUpdate(entity)) { return false; }
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        frameworkFilterEntityOfUpdate(entity);
        filterEntityOfUpdate(entity);
        assertEntityOfUpdate(entity);
        return true;
    }

    // -----------------------------------------------------
    //                                                Delete
    //                                                ------
    /**
     * ${database.ImplementComment}
     * @param entity Entity that the type is entity interface. (NotNull)
     * @return Deleted count.
     */
    protected int callRemove(${glEntity} entity) {
        if (!processBeforeDelete(entity)) { return 1;/*as Normal End*/ }
        return doCallRemove(entity);
    }
    protected abstract int doCallRemove(${glEntity} entity);

    /**
     * Process before delete.
     * @param entity Entity that the type is entity interface. (NotNull)
     * @return Execution Determination. (true: execute / false: non)
     */
    protected boolean processBeforeDelete(${glEntity} entity) {
        if (!determineExecuteDelete(entity)) { return false; }
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        frameworkFilterEntityOfDelete(entity);
        filterEntityOfDelete(entity);
        assertEntityOfDelete(entity);
        return true;
    }

    // -----------------------------------------------------
    //                                    Pre-Process Insert
    //                                    ------------------
    /**
     * Determine execution of insert.
     * @param entity Entity. (NotNull)
     * @return Execution Determination. (true: execute / false: non)
     */
    protected boolean determineExecuteInsert(${glEntity} entity) {
        return true;
    }

    /**
     * {Framework Method} Filter the entity of insert.
     * @param targetEntity Target entity that the type is entity interface. (NotNull)
     */
    protected void frameworkFilterEntityOfInsert(${glEntity} targetEntity) {
        injectSequenceToPrimaryKeyIfNeeds(targetEntity);
        setupCommonColumnOfInsertIfNeeds(targetEntity);
    }

    /**
     * Set up common columns of insert if it needs.
     * @param targetEntity Target entity that the type is entity interface. (NotNull)
     */
    protected void setupCommonColumnOfInsertIfNeeds(${glEntity} targetEntity) {
        final ${glCommonColumnAutoSetupper} setupper = getCommonColumnAutoSetupper();
        assertCommonColumnAutoSetupperNotNull();
        setupper.handleCommonColumnOfInsertIfNeeds(targetEntity);
    }

    private void assertCommonColumnAutoSetupperNotNull() {
        if (_commonColumnAutoSetupper == null) {
            String msg = "Look! Read the message below." + getLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
            msg = msg + "Not found the auto set-upper of common column as behavior's attribute!" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Advice]" + getLineSeparator();
            msg = msg + "Please confirm the definition of the set-upper at your component configuration of DBFlute." + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Your Behavior's Attributes]" + getLineSeparator();
            msg = msg + "  _behaviorCommandInvoker   : " + _behaviorCommandInvoker + getLineSeparator();
            msg = msg + "  _behaviorSelector         : " + _behaviorSelector + getLineSeparator();
            msg = msg + "  _commonColumnAutoSetupper : " + _commonColumnAutoSetupper + getLineSeparator();
            msg = msg + "* * * * * * * * * */";
            throw new IllegalStateException(msg);
        }
    }

    /**
     * Filter the entity of insert.
     * @param targetEntity Target entity that the type is entity interface. (NotNull)
     */
    protected void filterEntityOfInsert(${glEntity} targetEntity) {
    }

    /**
     * Assert the entity of insert.
     * @param entity Entity that the type is entity interface. (NotNull)
     */
    protected void assertEntityOfInsert(${glEntity} entity) {
    }

    // -----------------------------------------------------
    //                                    Pre-Process Update
    //                                    ------------------
    /**
     * Determine execution of update.
     * @param entity Entity. (NotNull)
     * @return Execution Determination. (true: execute / false: non)
     */
    protected boolean determineExecuteUpdate(${glEntity} entity) {
        return true;
    }

    /**
     * {Framework Method} Filter the entity of update.
     * @param targetEntity Target entity that the type is entity interface. (NotNull)
     */
    protected void frameworkFilterEntityOfUpdate(${glEntity} targetEntity) {
        setupCommonColumnOfUpdateIfNeeds(targetEntity);
    }

    /**
     * Set up common columns of update if it needs.
     * @param targetEntity Target entity that the type is entity interface. (NotNull)
     */
    protected void setupCommonColumnOfUpdateIfNeeds(${glEntity} targetEntity) {
        final ${glCommonColumnAutoSetupper} setupper = getCommonColumnAutoSetupper();
        assertCommonColumnAutoSetupperNotNull();
        setupper.handleCommonColumnOfUpdateIfNeeds(targetEntity);
    }
    
    /**
     * Filter the entity of update.
     * @param targetEntity Target entity that the type is entity interface. (NotNull)
     */
    protected void filterEntityOfUpdate(${glEntity} targetEntity) {
    }

    /**
     * Assert the entity of update.
     * @param entity Entity that the type is entity interface. (NotNull)
     */
    protected void assertEntityOfUpdate(${glEntity} entity) {
    }

    // -----------------------------------------------------
    //                                    Pre-Process Delete
    //                                    ------------------
    /**
     * Determine execution of delete.
     * @param entity Entity. (NotNull)
     * @return Execution Determination. (true: execute / false: non)
     */
    protected boolean determineExecuteDelete(${glEntity} entity) {
        return true;
    }

    /**
     * {Framework Method} Filter the entity of delete.
     * @param targetEntity Target entity that the type is entity interface. (NotNull)
     */
    protected void frameworkFilterEntityOfDelete(${glEntity} targetEntity) {
    }
    
    /**
     * Filter the entity of delete.
     * @param targetEntity Target entity that the type is entity interface. (NotNull)
     */
    protected void filterEntityOfDelete(${glEntity} targetEntity) {
    }

    /**
     * Assert the entity of delete.
     * @param entity Entity that the type is entity interface. (NotNull)
     */
    protected void assertEntityOfDelete(${glEntity} entity) {
    }

    /**
     * ${database.ImplementComment}
     * @param entityList Entity list that the type is entity interface. (NotNull)
     * @return Inserted count.
     */
    public int[] callCreateList(List<${glEntity}> entityList) {
        assertObjectNotNull("entityList", entityList);
        helpFilterBeforeInsertInternally(entityList);
        return doCreateList(entityList);
    }
    protected abstract int[] doCreateList(List<${glEntity}> entityList);

    /**
     * ${database.ImplementComment}
     * @param entityList Entity list that the type is entity interface. (NotNull)
     * @return Updated count.
     */
    public int[] callModifyList(List<${glEntity}> entityList) {
        assertObjectNotNull("entityList", entityList);
        helpFilterBeforeUpdateInternally(entityList);
        return doModifyList(entityList);
    }
    protected abstract int[] doModifyList(List<${glEntity}> entityList);

    /**
     * ${database.ImplementComment}
     * @param entityList Entity list that the type is entity interface. (NotNull)
     * @return Deleted count.
     */
    public int[] callRemoveList(List<${glEntity}> entityList) {
        assertObjectNotNull("entityList", entityList);
        helpFilterBeforeDeleteInternally(entityList);
        return doRemoveList(entityList);
    }
    protected abstract int[] doRemoveList(List<${glEntity}> entityList);

    protected void assertEntityHasVersionNoValue(${glEntity} entity) {
        if (!getDBMeta().hasVersionNo()) {
            return;
        }
        if (hasVersionNoValue(entity)) {
            return;
        }
        String msg = "Look! Read the message below." + getLineSeparator();
        msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
        msg = msg + "The value of 'version no' on the entity was Not Found!" + getLineSeparator() + getLineSeparator();
        msg = msg + "[Advice]" + getLineSeparator();
        msg = msg + "Please confirm the existence of the value of 'version no' on the entity." + getLineSeparator();
        msg = msg + "You called the method in which the check for optimistic lock is indispensable. " + getLineSeparator();
        msg = msg + "So 'version no' is required on the entity. " + getLineSeparator();
        msg = msg + "In addition, please confirm the necessity of optimistic lock. It might possibly be unnecessary." + getLineSeparator() + getLineSeparator();
        msg = msg + "[Entity]" + getLineSeparator();
        msg = msg + "entity to string = " + entity + getLineSeparator();
        msg = msg + "entity to map    = " + entity.getDBMeta().convertToColumnValueMap(entity) + getLineSeparator();
        msg = msg + "* * * * * * * * * */" + getLineSeparator();
        throw new OptimisticLockColumnValueNullException(msg);
    }

    protected void assertEntityHasUpdateDateValue(${glEntity} entity) {
        if (!getDBMeta().hasUpdateDate()) {
            return;
        }
        if (hasUpdateDateValue(entity)) {
            return;
        }
        String msg = "Look! Read the message below." + getLineSeparator();
        msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
        msg = msg + "The value of 'update date' on the entity was Not Found!" + getLineSeparator() + getLineSeparator();
        msg = msg + "[Advice]" + getLineSeparator();
        msg = msg + "Please confirm the existence of the value of 'update date' on the entity." + getLineSeparator();
        msg = msg + "You called the method in which the check for optimistic lock is indispensable. " + getLineSeparator();
        msg = msg + "So 'update date' is required on the entity. " + getLineSeparator();
        msg = msg + "In addition, please confirm the necessity of optimistic lock. It might possibly be unnecessary." + getLineSeparator() + getLineSeparator();
        msg = msg + "[Entity]" + getLineSeparator();
        msg = msg + "entity to string = " + entity + getLineSeparator();
        msg = msg + "entity to map    = " + entity.getDBMeta().convertToColumnValueMap(entity) + getLineSeparator();
        msg = msg + "* * * * * * * * * */" + getLineSeparator();
        throw new OptimisticLockColumnValueNullException(msg);
    }

    public static class OptimisticLockColumnValueNullException extends RuntimeException {
        private static final long serialVersionUID = 1L;
        public OptimisticLockColumnValueNullException(String msg) {
            super(msg);
        }
    }

    // ===================================================================================
    //                                                     Delegate Method Internal Helper
    //                                                     ===============================
    protected <ENTITY extends ${glEntity}> List<ENTITY> helpFilterBeforeInsertInternally(List<ENTITY> entityList) {
        final List<ENTITY> filteredList = new ArrayList<ENTITY>();
        for (final Iterator<ENTITY> ite = entityList.iterator(); ite.hasNext(); ) {
            final ENTITY entity = ite.next();
            if (!processBeforeInsert(entity)) { continue; }
            filteredList.add(entity);
        }
        return filteredList;
    }

    protected <ENTITY extends ${glEntity}> List<ENTITY> helpFilterBeforeUpdateInternally(List<ENTITY> entityList) {
        final List<ENTITY> filteredList = new ArrayList<ENTITY>();
        for (final Iterator<ENTITY> ite = entityList.iterator(); ite.hasNext(); ) {
            final ENTITY entity = ite.next();
            if (!processBeforeUpdate(entity)) { continue; }
            filteredList.add(entity);
        }
        return filteredList;
    }

    protected <ENTITY extends ${glEntity}> List<ENTITY> helpFilterBeforeDeleteInternally(List<ENTITY> entityList) {
        final List<ENTITY> filteredList = new ArrayList<ENTITY>();
        for (final Iterator<ENTITY> ite = entityList.iterator(); ite.hasNext(); ) {
            final ENTITY entity = ite.next();
            if (!processBeforeDelete(entity)) { continue; }
            filteredList.add(entity);
        }
        return filteredList;
    }
    
    // ===================================================================================
    //                                                                    Behavior Command
    //                                                                    ================
    protected ${glInsertEntityCommand} createInsertEntityCommand(${glEntity} entity) {
        assertBehaviorCommandInvoker("createInsertEntityCommand");
        return xsetupEntityCommand(new ${glInsertEntityCommand}(), entity);
    }

    protected ${glUpdateEntityCommand} createUpdateEntityCommand(${glEntity} entity) {
        assertBehaviorCommandInvoker("createUpdateEntityCommand");
        return xsetupEntityCommand(new ${glUpdateEntityCommand}(), entity);
    }

    protected ${glUpdateNonstrictEntityCommand} createUpdateNonstrictEntityCommand(${glEntity} entity) {
        assertBehaviorCommandInvoker("createUpdateNonstrictEntityCommand");
        return xsetupEntityCommand(new ${glUpdateNonstrictEntityCommand}(), entity);
    }

    protected ${glDeleteEntityCommand} createDeleteEntityCommand(${glEntity} entity) {
        assertBehaviorCommandInvoker("createDeleteEntityCommand");
        return xsetupEntityCommand(new ${glDeleteEntityCommand}(), entity);
    }

    protected ${glDeleteNonstrictEntityCommand} createDeleteNonstrictEntityCommand(${glEntity} entity) {
        assertBehaviorCommandInvoker("createDeleteNonstrictEntityCommand");
        return xsetupEntityCommand(new ${glDeleteNonstrictEntityCommand}(), entity);
    }

    private <COMMAND extends ${glAbstractEntityCommand}> COMMAND xsetupEntityCommand(COMMAND command, ${glEntity} entity) {
        command.setTableDbName(getTableDbName());
        _behaviorCommandInvoker.injectComponentProperty(command);
        command.setEntityType(entity.getClass());
        command.setEntity(entity);
        return command;
    }

    protected ${glBatchInsertEntityCommand} createBatchInsertEntityCommand(List<? extends ${glEntity}> entityList) {
        assertBehaviorCommandInvoker("createBatchInsertEntityCommand");
        return xsetupListEntityCommand(new ${glBatchInsertEntityCommand}(), entityList);
    }

    protected ${glBatchUpdateEntityCommand} createBatchUpdateEntityCommand(List<? extends ${glEntity}> entityList) {
        assertBehaviorCommandInvoker("createBatchUpdateEntityCommand");
        return xsetupListEntityCommand(new ${glBatchUpdateEntityCommand}(), entityList);
    }

    protected ${glBatchUpdateNonstrictEntityCommand} createBatchUpdateNonstrictEntityCommand(List<? extends ${glEntity}> entityList) {
        assertBehaviorCommandInvoker("createBatchUpdateNonstrictEntityCommand");
        return xsetupListEntityCommand(new ${glBatchUpdateNonstrictEntityCommand}(), entityList);
    }

    protected ${glBatchDeleteEntityCommand} createBatchDeleteEntityCommand(List<? extends ${glEntity}> entityList) {
        assertBehaviorCommandInvoker("createBatchDeleteEntityCommand");
        return xsetupListEntityCommand(new ${glBatchDeleteEntityCommand}(), entityList);
    }

    protected ${glBatchDeleteNonstrictEntityCommand} createBatchDeleteNonstrictEntityCommand(List<? extends ${glEntity}> entityList) {
        assertBehaviorCommandInvoker("createBatchDeleteNonstrictEntityCommand");
        return xsetupListEntityCommand(new ${glBatchDeleteNonstrictEntityCommand}(), entityList);
    }

    /**
     * @param <COMMAND> The type of behavior command for list entity.
     * @param command The command of behavior. (NotNull)
     * @param entityList The list of entity. (NotNull, NotEmpty)
     * @return The command of behavior. (NotNull)
     */
    private <COMMAND extends ${glAbstractListEntityCommand}> COMMAND xsetupListEntityCommand(COMMAND command, List<? extends ${glEntity}> entityList) {
        if (entityList.isEmpty()) {
            String msg = "The argument 'entityList' should not be empty: " + entityList;
            throw new IllegalStateException(msg);
        }
        command.setTableDbName(getTableDbName());
        _behaviorCommandInvoker.injectComponentProperty(command);
        command.setEntityType(entityList.get(0).getClass()); // *The list should not be empty!
        command.setEntityList(entityList);
        return command;
    }

    protected ${glQueryDeleteCBCommand} createQueryDeleteCBCommand(${glConditionBean} cb) {
        assertBehaviorCommandInvoker("createQueryDeleteCBCommand");
        final ${glQueryDeleteCBCommand} cmd = new ${glQueryDeleteCBCommand}();
        cmd.setTableDbName(getTableDbName());
        _behaviorCommandInvoker.injectComponentProperty(cmd);
        cmd.setConditionBeanType(cb.getClass());
        cmd.setConditionBean(cb);
        return cmd;
    }

    protected ${glQueryUpdateEntityCBCommand} createQueryUpdateEntityCBCommand(${glEntity} entity, ${glConditionBean} cb) {
        assertBehaviorCommandInvoker("createQueryUpdateEntityCBCommand");
        final ${glQueryUpdateEntityCBCommand} cmd = new ${glQueryUpdateEntityCBCommand}();
        cmd.setTableDbName(getTableDbName());
        _behaviorCommandInvoker.injectComponentProperty(cmd);
        cmd.setConditionBeanType(cb.getClass());
        cmd.setConditionBean(cb);
        cmd.setEntityType(entity.getClass());
        cmd.setEntity(entity);
        return cmd;
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    /**
     * Get the auto set-upper of common column.
     * @return The auto set-upper of common column. (Nullable: But normally NotNull)
     */
    protected ${glCommonColumnAutoSetupper} getCommonColumnAutoSetupper() {
        return _commonColumnAutoSetupper;
    }

    /**
     * Set the auto set-upper of common column.
     * @param commonColumnAutoSetupper The auto set-upper of common column. (NotNull)
     */
    public void setCommonColumnAutoSetupper(${glCommonColumnAutoSetupper} commonColumnAutoSetupper) {
        this._commonColumnAutoSetupper = commonColumnAutoSetupper;
    }
}
