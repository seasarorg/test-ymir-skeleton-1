${database.allClassCopyright}package ${glPackageBaseParameterBean};
#set ($myClassName = "${myBaseParameterBeanClassName}")

#if ($database.isPmbMetaDataForProcedure($pmbClassName))
import org.seasar.dbflute.outsidesql.ProcedurePmb;
#else
import org.seasar.dbflute.cbean.FetchBean;
import org.seasar.dbflute.twowaysql.pmbean.ParameterBean;
#end
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName))
import org.seasar.dbflute.cbean.coption.LikeSearchOption;
#end
#if ($database.hasPmbMetaDataPropertyOptionAnyFromTo($pmbClassName))
import org.seasar.dbflute.cbean.coption.FromToOption;
#end

/**
 * The parameter-bean of ${pmbClassName}.
 * @author ${database.classAuthor}
 */
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
public class ${myClassName} implements ProcedurePmb {
#else
public class ${myClassName}${database.getPmbMetaDataSuperClassDefinition($pmbClassName)} implements ParameterBean, FetchBean {
#end
#if ($database.isPmbMetaDataForProcedure($pmbClassName))

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    // -----------------------------------------------------
    //                                   Procedure Parameter
    //                                   -------------------
#set ($procedureParameterIndex = 0)
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
#if ($database.isPmbMetaDataPropertyOptionProcedureParameterIn($pmbClassName, $propertyName))
    public static final String ${propertyName}_PROCEDURE_PARAMETER = "in, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterOut($pmbClassName, $propertyName))
    public static final String ${propertyName}_PROCEDURE_PARAMETER = "out, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterInOut($pmbClassName, $propertyName))
    public static final String ${propertyName}_PROCEDURE_PARAMETER = "inout, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterReturn($pmbClassName, $propertyName))
    public static final String ${propertyName}_PROCEDURE_PARAMETER = "return";
#end
#end
#end

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
    /** The value of ${propertyName}. */
    protected ${propertyType} _${propertyName};

#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName, $propertyName))
    /** The value of likeSearchOption for ${propertyName}. */
    protected LikeSearchOption _${propertyName}InternalLikeSearchOption;

#end
#end
#if ($database.hasPmbMetaDataSafetyResultDefitinion($pmbClassName))
    /** The max size of safety result. */
    protected int _safetyMaxResultSize;

#end
    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}() {
    }
    
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
    // ===================================================================================
    //                                                                           Procedure
    //                                                                           =========
    /**
     * {@inheritDoc}
     */
    public String getProcedureName() {
        return "${database.getPmbMetaDataProcedureName($pmbClassName)}";
    }

#end
#if ($database.hasPmbMetaDataSafetyResultDefitinion($pmbClassName))
    // ===================================================================================
    //                                                                       Safety Result
    //                                                                       =============
    /**
     * {@inheritDoc}
     */
    public void checkSafetyResult(int safetyMaxResultSize) {
        _safetyMaxResultSize = safetyMaxResultSize;
    }

    /**
     * {@inheritDoc}
     */
    public int getSafetyMaxResultSize() {
        return _safetyMaxResultSize;
    }

#end
    // ===================================================================================
    //                                                                       Assist Helper
    //                                                                       =============
    /**
     * @param value Query value. (Nullable)
     * @return Converted value. (Nullable)
     */
    protected String convertEmptyToNullIfString(String value) {
        return filterRemoveEmptyString(value);
    }

    /**
     * @param value Query value string. (Nullable)
     * @return Removed-empty value. (Nullable)
     */
    protected String filterRemoveEmptyString(String value) {
        return ((value != null && !"".equals(value)) ? value : null);
    }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    /**
     * @return The display string of all parameters. (NotNull)
     */
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName()).append(":");
        sb.append(xbuildColumnString());
        return sb.toString();
    }
    private String xbuildColumnString() {
        final String delimiter = ",";
        final StringBuilder sb = new StringBuilder();
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
        sb.append(delimiter).append(_${propertyName});
#end
        if (sb.length() > 0) { sb.delete(0, delimiter.length()); }
        sb.insert(0, "{").append("}");
        return sb.toString();
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
    /**
     * Get the value of ${propertyName}. (Converted empty to null)
     * @return The value of ${propertyName}. (Nullable & NotEmptyString: if the value is empty string, returns null)
     */
    public ${propertyType} get${database.initCap($propertyName)}() {
#if ($propertyType.endsWith("String"))
        return ($propertyType)convertEmptyToNullIfString(_${propertyName});
#else
        return _${propertyName};
#end
    }
#if (!$database.hasPmbMetaDataPropertyOptionOriginalOnlyOneSetter($pmbClassName, $propertyName))

    /**
     * Set the value of ${propertyName}.
     * @param ${propertyName} The value of ${propertyName}. (Nullable)
     */
    public void set${database.initCap($propertyName)}(${propertyType} ${propertyName}) {
        _${propertyName} = ${propertyName};
    }
#end
#if ($database.isPmbMetaDataPropertyOptionLikeSearch($pmbClassName, $propertyName))

    /**
     * Set the value of ${propertyName}.
     * @param ${propertyName} The value of ${propertyName}. (Nullable)
     * @param ${propertyName}Option The option of likeSearch for ${propertyName}. (Nullable)
     */
    public void set${database.initCap($propertyName)}(${propertyType} ${propertyName}, LikeSearchOption ${propertyName}Option) {
        _${propertyName} = ${propertyName};
        _${propertyName}InternalLikeSearchOption = ${propertyName}Option;
    }
#end
#if ($database.isPmbMetaDataPropertyOptionPrefixSearch($pmbClassName, $propertyName))

    /**
     * Set the value of ${propertyName} as prefix-search.
     * @param ${propertyName} The value of ${propertyName}. (Nullable)
     */
    public void set${database.initCap($propertyName)}_PrefixSearch(${propertyType} ${propertyName}) {
        _${propertyName} = ${propertyName};
        _${propertyName}InternalLikeSearchOption = new LikeSearchOption().likePrefix();
    }
#end
#if ($database.isPmbMetaDataPropertyOptionContainSearch($pmbClassName, $propertyName))

    /**
     * Set the value of ${propertyName} as contain-search.
     * @param ${propertyName} The value of ${propertyName}. (Nullable)
     */
    public void set${database.initCap($propertyName)}_ContainSearch(${propertyType} ${propertyName}) {
        _${propertyName} = ${propertyName};
        _${propertyName}InternalLikeSearchOption = new LikeSearchOption().likeContain();
    }
#end
#if ($database.isPmbMetaDataPropertyOptionSuffixSearch($pmbClassName, $propertyName))

    /**
     * Set the value of ${propertyName} as suffix-search.
     * @param ${propertyName} The value of ${propertyName}. (Nullable)
     */
    public void set${database.initCap($propertyName)}_SuffixSearch(${propertyType} ${propertyName}) {
        _${propertyName} = ${propertyName};
        _${propertyName}InternalLikeSearchOption = new LikeSearchOption().likeSuffix();
    }
#end
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName, $propertyName))

    /**
     * Get the internal option of likeSearch for ${propertyName}. {Internal Method: Don't Invoke This!}
     * @return The internal option of likeSearch for ${propertyName}. (Nullable)
     */
    public LikeSearchOption get${database.initCap($propertyName)}InternalLikeSearchOption() {
        return _${propertyName}InternalLikeSearchOption;
    }
#end
#if ($database.isPmbMetaDataPropertyOptionFromDate($pmbClassName, $propertyName))

    /**
     * Set the value of ${propertyName} as from-date.
     * @param ${propertyName} The value of ${propertyName}. (Nullable)
     */
    public void set${database.initCap($propertyName)}_FromDate(${propertyType} ${propertyName}) {
        _${propertyName} = new FromToOption().compareAsDate().filterFromDate(${propertyName});
    }
#end
#if ($database.isPmbMetaDataPropertyOptionToDate($pmbClassName, $propertyName))

    /**
     * Set the value of ${propertyName} as to-date.
     * @param ${propertyName} The value of ${propertyName}. (Nullable)
     */
    public void set${database.initCap($propertyName)}_ToDate(${propertyType} ${propertyName}) {
        _${propertyName} = new FromToOption().compareAsDate().filterToDate(${propertyName});
    }
#end
#if ($database.isPmbMetaDataPropertyOptionClassification($pmbClassName, $propertyName))
#set ($classificationName = $database.getPmbMetaDataPropertyOptionClassificationName($pmbClassName, $propertyName))
#foreach ($classificationMap in $database.getPmbMetaDataPropertyOptionClassificationMapList($pmbClassName, $propertyName))

    /**
     * Set the value of ${propertyName} as ${classificationMap.get('name')}. <br />
     * ${database.getMapValue($classificationMap, 'comment')}
     */
    public void set${database.initCap($propertyName)}_${classificationMap.get('name')}() {
        _${propertyName} = ${glPackageBaseCommon}.${glCDef}.${classificationName}.${classificationMap.get('name')}.code();
    }
#end
#end

#end
}
