${database.allClassCopyright}package ${myDBMetaPackageName};
#set ($myClassName = "${myDBMetaClassName}")

import java.util.List;
import java.util.Map;

import ${glPackageBaseCommon}.${glEntity};
import ${glPackageBaseCommonDBMeta}.${glAbstractDBMeta};
import ${myExtendedEntityPackageName}.${myExtendedObjectClassName};
import ${glPackageBaseCommonDBMetaInfo}.*;
import ${glPackageBaseCommonHelper}.${glStringKeyMap};

/**
 * The DB meta of ${table.name}. (Singleton)
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} extends ${glAbstractDBMeta} {

    // ===================================================================================
    //                                                                           Singleton
    //                                                                           =========
    private static final ${myClassName} _instance = new ${myClassName}();
    private ${myClassName}() {}
    public static ${myClassName} getInstance() { return _instance; }

    // ===================================================================================
    //                                                                          Table Info
    //                                                                          ==========
    public String getTableDbName() { return "$table.name"; }
    public String getTablePropertyName() { return "$table.javaBeansRulePropertyName"; }
    public String getTableSqlName() { return "$table.tableSqlName"; }

    // ===================================================================================
    //                                                                         Column Info
    //                                                                         ===========
#foreach ($col in $table.columns)
#if ($col.isVersionNo())
    protected ${glColumnInfo} _column${col.javaBeansRulePropertyNameInitCap} = cci("${col.name}", ${col.aliasSettingExpression}, "${col.javaBeansRulePropertyName}", ${col.javaNative}.class, ${col.isPrimaryKey()}, ${col.columnSizeSettingExpression}, ${col.columnDecimalDigitsSettingExpression}, OptimisticLockType.VERSION_NO);
#elseif ($col.isUpdateDate())
    protected ${glColumnInfo} _column${col.javaBeansRulePropertyNameInitCap} = cci("${col.name}", ${col.aliasSettingExpression}, "${col.javaBeansRulePropertyName}", ${col.javaNative}.class, ${col.isPrimaryKey()}, ${col.columnSizeSettingExpression}, ${col.columnDecimalDigitsSettingExpression}, OptimisticLockType.UPDATE_DATE);
#else
    protected ${glColumnInfo} _column${col.javaBeansRulePropertyNameInitCap} = cci("${col.name}", ${col.aliasSettingExpression}, "${col.javaBeansRulePropertyName}", ${col.javaNative}.class, ${col.isPrimaryKey()}, ${col.columnSizeSettingExpression}, ${col.columnDecimalDigitsSettingExpression});
#end
#end

#foreach ($col in $table.columns)
    public ${glColumnInfo} column${col.javaBeansRulePropertyNameInitCap}() { return _column${col.javaBeansRulePropertyNameInitCap}; }
#end

    { initializeInformationResource(); }

    // ===================================================================================
    //                                                                         Unique Info
    //                                                                         ===========
    // -----------------------------------------------------
    //                                       Primary Element
    //                                       ---------------
#if ($table.hasPrimaryKey())
#if ($table.hasOnlyOnePrimaryKey())
    public ${glUniqueInfo} getPrimaryUniqueInfo() { return cpui(column${table.primaryKeyAsOne.javaBeansRulePropertyNameInitCap}()); }
#else
    public ${glUniqueInfo} getPrimaryUniqueInfo() {
        List<${glColumnInfo}> ls = newArrayList();
#foreach ($col in $table.primaryKey)
        ls.add(column${col.javaBeansRulePropertyNameInitCap}());
#end
        return cpui(ls);
    }
#end
#else
    public ${glUniqueInfo} getPrimaryUniqueInfo() {
        throw new UnsupportedOperationException("The table does not have primary key: " + getTableDbName());
    }
#end
    public boolean hasPrimaryKey() { return ${table.hasPrimaryKey()}; }
    public boolean hasTwoOrMorePrimaryKeys() { return ${table.hasTwoOrMorePrimaryKeys()}; }

    // ===================================================================================
    //                                                                       Relation Info
    //                                                                       =============
    // -----------------------------------------------------
    //                                      Foreign Property
    //                                      ----------------
#foreach ($foreignKeys in $table.foreignKeys)
    public ${glForeignInfo} foreign${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}() {
#if ($foreignKeys.isSimpleKeyFK())
#set ($column = $foreignKeys.localColumnAsOne)
#set ($yourColumn = ${foreignKeys.getForeignColumnByLocalColumn(${column})})
        Map<${glColumnInfo}, ${glColumnInfo}> map = newLinkedHashMap(column${column.javaBeansRulePropertyNameInitCap}(), ${foreignKeys.foreignTableDBMetaClassName}.getInstance().column${yourColumn.javaBeansRulePropertyNameInitCap}());
#else
        Map<${glColumnInfo}, ${glColumnInfo}> map = newLinkedHashMap();
#foreach ($column in $foreignKeys.localColumnList)
#set ($yourColumn = ${foreignKeys.getForeignColumnByLocalColumn(${column})})
        map.put(column${column.javaBeansRulePropertyNameInitCap}(), ${foreignKeys.foreignTableDBMetaClassName}.getInstance().column${yourColumn.javaBeansRulePropertyNameInitCap}());
#end
#end
        return cfi("${foreignKeys.foreignJavaBeansRulePropertyName}", this, ${foreignKeys.foreignTableDBMetaClassName}.getInstance(), map, ${table.resolveForeignIndex($foreignKeys)}, ${foreignKeys.isOneToOne()});
    }
#end
#foreach ($referrer in $table.referrers)
#set ($genericsColumnInfoMap = "${glColumnInfo}, ${glColumnInfo}")
#if (${referrer.isOneToOne()})
    public ${glForeignInfo} foreign${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}() {
#if ($referrer.isSimpleKeyFK())
#set ($column = $referrer.foreignColumnAsOne)
#set ($yourColumn = ${referrer.getLocalColumnByForeignColumn(${column})})
        Map<${glColumnInfo}, ${glColumnInfo}> map = newLinkedHashMap(column${column.javaBeansRulePropertyNameInitCap}(), ${referrer.referrerTableDBMetaClassName}.getInstance().column${yourColumn.javaBeansRulePropertyNameInitCap}());
#else
        Map<${glColumnInfo}, ${glColumnInfo}> map = newLinkedHashMap();
#foreach ($column in $referrer.foreignColumnList)
#set ($yourColumn = ${referrer.getLocalColumnByForeignColumn(${column})})
        map.put(column${column.javaBeansRulePropertyNameInitCap}(), ${referrer.referrerTableDBMetaClassName}.getInstance().column${yourColumn.javaBeansRulePropertyNameInitCap}());
#end
#end
        return cfi("${referrer.refererJavaBeansRulePropertyNameAsOne}", this, ${referrer.referrerTableDBMetaClassName}.getInstance(), map, ${table.resolveReferrerIndexAsOne($referrer)}, ${referrer.isOneToOne()});
    }
#end
#end

    // -----------------------------------------------------
    //                                     Referrer Property
    //                                     -----------------
#foreach ($referrer in $table.referrers)
#if (!${referrer.isOneToOne()})
    public ${glReferrerInfo} referrer${referrer.referrerJavaBeansRulePropertyNameInitCap}() {
#if ($referrer.isSimpleKeyFK())
#set ($column = $referrer.foreignColumnAsOne)
        Map<${glColumnInfo}, ${glColumnInfo}> map = newLinkedHashMap(column${column.javaBeansRulePropertyNameInitCap}(), ${referrer.referrerTableDBMetaClassName}.getInstance().column${referrer.getLocalColumnByForeignColumn(${column}).javaBeansRulePropertyNameInitCap}());
#else
        Map<${glColumnInfo}, ${glColumnInfo}> map = newLinkedHashMap();
#foreach ($column in $referrer.foreignColumnList)
        map.put(column${column.javaBeansRulePropertyNameInitCap}(), ${referrer.referrerTableDBMetaClassName}.getInstance().column${referrer.getLocalColumnByForeignColumn(${column}).javaBeansRulePropertyNameInitCap}());
#end
#end
        return cri("${referrer.referrerJavaBeansRulePropertyName}", this, ${referrer.referrerTableDBMetaClassName}.getInstance(), map, ${referrer.isOneToOne()});
    }
#end
#end
#if ($database.isMakeFlatExpansion())

    // -----------------------------------------------------
    //                                        Relation Trace
    //                                        --------------
    public ${table.relationTraceClassName}RelationTrace createRelationTrace(RelationTraceFixHandler relationTraceFixHandler) {
        return new ${table.relationTraceClassName}RelationTrace(relationTraceFixHandler);
    }

    public ${table.relationTraceClassName}RelationTrace createRelationTrace(List<${glRelationInfo}> relationList, List<AbstractRelationTrace> relationTraceList) {
        return new ${table.relationTraceClassName}RelationTrace(relationList, relationTraceList);
    }

    public static class ${table.relationTraceClassName}RelationTrace extends AbstractRelationTrace {

        /**
         * Constructor for first step.
         * @param relationTraceFixHandler The handler of fixed relation trace. (Nullable)
         */
        public ${table.relationTraceClassName}RelationTrace(RelationTraceFixHandler relationTraceFixHandler) {
            super(relationTraceFixHandler);
        }

        /**
         * Constructor for relation step.
         * @param relationList The list of relation. (NotNull)
         * @param relationTraceList The list of relation trace. (NotNull)
         */
        public ${table.relationTraceClassName}RelationTrace(List<${glRelationInfo}> relationList, List<AbstractRelationTrace> relationTraceList) {
            super(relationList, relationTraceList);
        }

#foreach ($foreignKeys in $table.foreignKeys)
        public ${foreignKeys.foreignTableDBMetaClassName}.${foreignKeys.foreignTable.relationTraceClassName}RelationTrace foreign${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}() {
            _relationList.add(${myDBMetaClassName}.getInstance().foreign${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}());
            return ${foreignKeys.foreignTableDBMetaClassName}.getInstance().createRelationTrace(_relationList, _relationTraceList);
        }
#end
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
        public ${referrer.referrerTableDBMetaClassName}.${referrer.table.relationTraceClassName}RelationTrace foreign${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}() {
            _relationList.add(${myDBMetaClassName}.getInstance().foreign${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}());
            return ${referrer.referrerTableDBMetaClassName}.getInstance().createRelationTrace(_relationList, _relationTraceList);
        }
#end
#end
#foreach ($referrer in $table.referrers)
#if (!${referrer.isOneToOne()})
        public ${referrer.referrerTableDBMetaClassName}.${referrer.table.relationTraceClassName}RelationTrace referrer${referrer.referrerJavaBeansRulePropertyNameInitCap}() {
            _relationList.add(${myDBMetaClassName}.getInstance().referrer${referrer.referrerJavaBeansRulePropertyNameInitCap}());
            return ${referrer.referrerTableDBMetaClassName}.getInstance().createRelationTrace(_relationList, _relationTraceList);
        }
#end
#end

#foreach ($col in $table.columns)
        public RelationTrace column${col.javaBeansRulePropertyNameInitCap}() { return fixTrace(_relationList, ${myDBMetaClassName}.getInstance().column${col.javaBeansRulePropertyNameInitCap}()); }
#end
    }
#end

    // ===================================================================================
    //                                                                        Various Info
    //                                                                        ============
#if ($table.isUseIdentity())
    public boolean hasIdentity() { return true; }
#end
#if ($table.isUseSequence())
    public boolean hasSequence() { return true; }
    public String getSequenceNextValSql() { return "${table.sequenceNextSql}"; }
#end
#if ($table.isUseVersionNo())
    public boolean hasVersionNo() { return true; }
    public ${glColumnInfo} getVersionNoColumnInfo() { return _column${table.versionNoJavaName}; }
#end
#if ($table.isUseUpdateDate())
    public boolean hasUpdateDate() { return true; }
    public ${glColumnInfo} getUpdateDateColumnInfo() { return _column${table.updateDateJavaName}; }
#end
#if ($table.hasAllCommonColumn())
    public boolean hasCommonColumn() { return true; }
#end

    // ===================================================================================
    //                                                                           Type Name
    //                                                                           =========
    public String getEntityTypeName() { return "${myExtendedEntityPackageName}.${myExtendedObjectClassName}"; }
#if ($isExistConditionBean)
    public String getConditionBeanTypeName() { return "${glPackageBaseCB}.${myConditionBeanClassName}"; }
#else
    public String getConditionBeanTypeName() { return null; }
#end
#if ($isExistDao)
    public String getDaoTypeName() { return "${myExtendedDaoPackageName}.${myExtendedDaoClassName}"; }
#else
    public String getDaoTypeName() { return null; }
#end
#if ($isExistBehavior)
    public String getBehaviorTypeName() { return "${myExtendedBhvPackageName}.${myExtendedBhvClassName}"; }
#else
    public String getBehaviorTypeName() { return null; }
#end

    // ===================================================================================
    //                                                                         Object Type
    //                                                                         ===========
    public Class<${myExtendedObjectClassName}> getEntityType() { return ${myExtendedObjectClassName}.class; }

    // ===================================================================================
    //                                                                     Object Instance
    //                                                                     ===============
    public ${glEntity} newEntity() { return newMyEntity(); }
    public ${myExtendedObjectClassName} newMyEntity() { return new ${myExtendedObjectClassName}(); }

    // ===================================================================================
    //                                                                     Entity Handling
    //                                                                     ===============  
    // -----------------------------------------------------
    //                                                Accept
    //                                                ------
    public void acceptPrimaryKeyMap(${glEntity} entity, Map<String, ? extends Object> primaryKeyMap) {
        doAcceptPrimaryKeyMap((${myExtendedObjectClassName})entity, primaryKeyMap, _epsMap);
    }

    public void acceptPrimaryKeyMapString(${glEntity} entity, String primaryKeyMapString) {
        MapStringUtil.acceptPrimaryKeyMapString(primaryKeyMapString, entity);
    }

    public void acceptColumnValueMap(${glEntity} entity, Map<String, ? extends Object> columnValueMap) {
        doAcceptColumnValueMap((${myExtendedObjectClassName})entity, columnValueMap, _epsMap);
    }

    public void acceptColumnValueMapString(${glEntity} entity, String columnValueMapString) {
        MapStringUtil.acceptColumnValueMapString(columnValueMapString, entity);
    }

    // -----------------------------------------------------
    //                                               Extract
    //                                               -------
    public String extractPrimaryKeyMapString(${glEntity} entity) { return MapStringUtil.extractPrimaryKeyMapString(entity); }
    public String extractPrimaryKeyMapString(${glEntity} entity, String startBrace, String endBrace, String delimiter, String equal) {
        return doExtractPrimaryKeyMapString(entity, startBrace, endBrace, delimiter, equal);
    }
    public String extractColumnValueMapString(${glEntity} entity) { return MapStringUtil.extractColumnValueMapString(entity); }
    public String extractColumnValueMapString(${glEntity} entity, String startBrace, String endBrace, String delimiter, String equal) {
        return doExtractColumnValueMapString(entity, startBrace, endBrace, delimiter, equal);
    }

    // -----------------------------------------------------
    //                                               Convert
    //                                               -------
    public List<Object> convertToColumnValueList(${glEntity} entity) { return newArrayList(convertToColumnValueMap(entity).values()); }
    public Map<String, Object> convertToColumnValueMap(${glEntity} entity) { return doConvertToColumnValueMap(entity); }
    public List<String> convertToColumnStringValueList(${glEntity} entity) { return newArrayList(convertToColumnStringValueMap(entity).values()); }
    public Map<String, String> convertToColumnStringValueMap(${glEntity} entity) { return doConvertToColumnStringValueMap(entity); }

    // ===================================================================================
    //                                                               Entity Property Setup
    //                                                               =====================
    // It's very INTERNAL!
    protected Map<String, Eps<${myExtendedObjectClassName}>> _epsMap = ${glStringKeyMap}.createAsFlexibleConcurrent();
    {
#foreach ($column in $table.columns)
        setupEps(_epsMap, new Eps${column.javaName}(), column${column.javaBeansRulePropertyNameInitCap}());
#end
    }
    
    public boolean hasEntityPropertySetupper(String propertyName) {
        return _epsMap.containsKey(propertyName);
    }

    public void setupEntityProperty(String propertyName, Object entity, Object value) {
        findEps(_epsMap, propertyName).setup((${myExtendedObjectClassName})entity, value);
    }
    
#foreach ($column in $table.columns)
    public static class Eps${column.javaName} implements Eps<${myExtendedObjectClassName}> {
        public void setup(${myExtendedObjectClassName} e, Object v) { e.set${column.javaName}((${column.javaNative})v); }
    }
#end
}
