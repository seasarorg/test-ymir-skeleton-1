${database.allClassCopyright}package ${glPackageBaseCommonHelperTokenFileImpl};

import ${glPackageBaseCommonHelperTokenFile}.${glFileToken};

import ${glPackageBaseCommonHelperTokenFile}.${glFileMakingCallback};
import ${glPackageBaseCommonHelperTokenFile}.${glFileMakingOption};
import ${glPackageBaseCommonHelperTokenFile}.${glFileMakingRowResource};
import ${glPackageBaseCommonHelperTokenFile}.${glFileMakingSimpleFacade};

/**
 * @author ${database.ClassAuthor}
 */
public class ${glFileMakingSimpleFacadeImpl} implements ${glFileMakingSimpleFacade} {

    protected ${glFileToken} _fileToken = new ${glFileTokenImpl}();

    public void setFileToken(${glFileToken} fileToken) {
        this._fileToken = fileToken;
    }

    /**
     * Make token-file from row-list.
     * 
     * @param filename Output target file name. (NotNull)
     * @param rowList Row-list composed of value-list. (NotNull)
     * @param fileMakingOption File-making option. (NotNull and Required{encoding and delimiter})
     * @throws java.io.FileNotFoundException
     * @throws java.io.IOException
     */
    public void makeFromRowList(final String filename, final java.util.List${database.filterGenericsString('java.util.List<String>')} rowList, final ${glFileMakingOption} fileMakingOption) throws java.io.FileNotFoundException, java.io.IOException {
        final ${glFileMakingCallback} fileMakingCallback = new ${glFileMakingCallback}() {
            protected int rowCount = 0;
            public ${glFileMakingRowResource} getRowResource() {
                ++rowCount;
                if (rowList.size() < rowCount) {
                    return null;// The End!
                }
                final java.util.List${database.filterGenericsString('String')} valueList = (java.util.List${database.filterGenericsString('String')})rowList.get(rowCount - 1);
                final ${glFileMakingRowResource} fileMakingRowResource = new ${glFileMakingRowResource}();
                fileMakingRowResource.setValueList(valueList);
                return fileMakingRowResource;
            }
        };
        _fileToken.make(filename, fileMakingCallback, fileMakingOption);
    }

    /**
     * Make bytes from row-list.
     * 
     * @param rowList Row-list composed of value-list. (NotNull)
     * @param fileMakingOption File-making option. (NotNull and Required{encoding and delimiter})
     * @return Result byte array. (NotNull)
     * @throws java.io.FileNotFoundException
     * @throws java.io.IOException
     */
    public byte[] makeFromRowList(final java.util.List${database.filterGenericsString('java.util.List<String>')} rowList, final ${glFileMakingOption} fileMakingOption) throws java.io.FileNotFoundException, java.io.IOException {
        final ${glFileMakingCallback} fileMakingCallback = new ${glFileMakingCallback}() {
            protected int rowCount = 0;
            public ${glFileMakingRowResource} getRowResource() {
                ++rowCount;
                if (rowList.size() < rowCount) {
                    return null;// The End!
                }
                final java.util.List${database.filterGenericsString('String')} valueList = (java.util.List${database.filterGenericsString('String')})rowList.get(rowCount - 1);
                final ${glFileMakingRowResource} fileMakingRowResource = new ${glFileMakingRowResource}();
                fileMakingRowResource.setValueList(valueList);
                return fileMakingRowResource;
            }
        };
        final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
        _fileToken.make(baos, fileMakingCallback, fileMakingOption);
        return baos.toByteArray();
    }
}
