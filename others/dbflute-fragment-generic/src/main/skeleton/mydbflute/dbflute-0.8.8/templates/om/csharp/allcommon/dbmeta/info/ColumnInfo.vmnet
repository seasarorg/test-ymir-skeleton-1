#set ($myClassName = "${glColumnInfo}")

using System;
using System.Reflection;

using ${glPackageBaseCommonDBMeta};

namespace ${glPackageBaseCommonDBMetaInfo} {

    public class ${myClassName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected ${glDBMeta} dbmeta;
        protected String columnDbName;
        protected String propertyName;
        protected Type propertyType;
        protected bool primary;
        protected int? columnSize;
        protected int? columnDecimalDigits;
        protected String columnAlias;
        protected OptimisticLockType optimisticLockType;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${myClassName}(${glDBMeta} dbmeta, String columnDbName, String columnAlias, String propertyName
                       , Type propertyType, bool primary, int? columnSize, int? columnDecimalDigits)
            : this (dbmeta, columnDbName, columnAlias, propertyName, propertyType, primary
                  , columnSize, columnDecimalDigits
                  , OptimisticLockType.NONE) {
        }

        public ${myClassName}(${glDBMeta} dbmeta, String columnDbName, String columnAlias, String propertyName
                       , Type propertyType, bool primary, int? columnSize, int? columnDecimalDigits
                       , OptimisticLockType optimisticLockType) {
            AssertObjectNotNull("dbmeta", dbmeta);
            AssertObjectNotNull("columnDbName", columnDbName);
            AssertObjectNotNull("propertyName", propertyName);
            AssertObjectNotNull("propertyType", propertyType);
            AssertObjectNotNull("optimisticLockType", optimisticLockType);
            this.dbmeta = dbmeta;
            this.columnDbName = columnDbName;
            this.columnAlias = columnAlias;
            this.propertyName = propertyName;
            this.propertyType = propertyType;
            this.primary = primary;
            this.columnSize = columnSize;
            this.columnDecimalDigits = columnDecimalDigits;
            this.optimisticLockType = optimisticLockType;
        }

        // ===============================================================================
        //                                                                          Finder
        //                                                                          ======
        public PropertyInfo FindProperty() {
            return FindProperty(dbmeta.EntityType, propertyName);
        }

        // ===============================================================================
        //                                                                 Internal Helper
        //                                                                 ===============
        protected virtual PropertyInfo FindProperty(Type clazz, String name) {
            return clazz.GetProperty(name);
        }

        // ===============================================================================
        //                                                            Optimistic Lock Type
        //                                                            ====================
        public bool IsOptimisticLock { get {
            return IsVersionNo || IsUpdateDate;
        }}

        public bool IsVersionNo { get {
            return OptimisticLockType.VERSION_NO == optimisticLockType;
        }}

        public bool IsUpdateDate { get {
            return OptimisticLockType.UPDATE_DATE == optimisticLockType;
        }}

        // ===============================================================================
        //                                                                  General Helper
        //                                                                  ==============
        protected void AssertObjectNotNull(String variableName, Object value) {
            if (variableName == null) {
                String msg = "The value should not be null: variableName=" + variableName + " value=" + value;
                throw new ArgumentException(msg);
            }
            if (value == null) {
                String msg = "The value should not be null: variableName=" + variableName;
                throw new ArgumentException(msg);
            }
        }

        // ===============================================================================
        //                                                                  Basic Override
        //                                                                  ==============
        public override int GetHashCode() {
            return dbmeta.GetHashCode() + columnDbName.GetHashCode();
        }

        public override bool Equals(Object obj) {
            if (obj == null || !(obj is ${myClassName})) {
                return false;
            }
            ${myClassName} target = (${myClassName})obj;
            if (!dbmeta.Equals(target.DBMeta)) {
                return false;
            }
            if (!columnDbName.Equals(target.ColumnDbName)) {
                return false;
            }
            return true;
        }

        public override String ToString() {
            return dbmeta.TableDbName + "." + columnDbName;
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        public ${glDBMeta} DBMeta {
            get { return dbmeta; }
        }

        public String ColumnDbName {
            get { return columnDbName; }
        }

        public String ColumnAlias {
            get { return columnAlias; }
        }

        public String PropertyName {
            get { return propertyName; }
        }

        public Type PropertyType {
            get { return propertyType; }
        }

        public bool IsPrimary {
            get { return primary; }
        }

        public int? ColumnSize {
            get { return columnSize; }
        }

        public int? ColumnDecimalDigits {
            get { return columnDecimalDigits; }
        }
    }
}
