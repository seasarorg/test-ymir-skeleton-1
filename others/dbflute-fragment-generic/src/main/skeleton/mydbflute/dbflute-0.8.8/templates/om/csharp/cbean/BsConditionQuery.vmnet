#set ($myClassName = "${myBaseConditionQueryClassName}")

using System;

using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCValue};
using ${glPackageBaseCommonSqlClause};
using ${glPackageBaseCommonJavaLike};
using ${glPackageCQ};
using ${glPackageCIQ};

namespace ${glPackageBaseCQ} {

    [System.Serializable]
    public class ${myClassName} : ${myAbstractBaseConditionQueryClassName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected ${myConditionInlineQueryClassName} _inlineQuery;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${myClassName}(${glConditionQuery} childQuery, ${glSqlClause} sqlClause, String aliasName, int nestLevel)
            : base(childQuery, sqlClause, aliasName, nestLevel) {}

        // ===============================================================================
        //                                                                          Inline
        //                                                                          ======
        public ${myConditionInlineQueryClassName} Inline() {
            if (_inlineQuery == null) {
                _inlineQuery = new ${myConditionInlineQueryClassName}(getChildQuery(), getSqlClause(), getAliasName(), getNestLevel(), this);
            }
            _inlineQuery.xsetOnClauseInline(false);
            return _inlineQuery;
        }
        
        public ${myConditionInlineQueryClassName} On() {
            if (isBaseQuery(this)) { throw new UnsupportedOperationException("Unsupported onClause of Base Table!"); }
            ${myConditionInlineQueryClassName} inlineQuery = Inline();
            inlineQuery.xsetOnClauseInline(true);
            return inlineQuery;
        }

        // ===============================================================================
        //                                                                           Query
        //                                                                           =====
  #foreach ($col in $table.columns)
    #set ($tmpJavaName = "${col.JavaName}")
    #set ($tmpUncapitalisedJavaName = "${col.UncapitalisedJavaName}")

        protected ${glConditionValue} _${tmpUncapitalisedJavaName};
        public ${glConditionValue} ${tmpJavaName} {
            get { if (_${tmpUncapitalisedJavaName} == null) { _${tmpUncapitalisedJavaName} = new ${glConditionValue}(); } return _${tmpUncapitalisedJavaName}; }
        }
        protected override ${glConditionValue} getCValue${tmpJavaName}() { return this.${tmpJavaName}; }

#if (${col.isJavaNativeStringObject()})
#if (${col.isSingleKeyForeignKey()} && !${col.foreignKey.hasFixedCondition()})
#set ($relatedCBClassName = "${col.foreignKey.foreignTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${col.foreignKey.foreignTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${referrer.ReferrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${referrer.ReferrerPropertyNameInitCap}")
#end

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotInScopeSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotInScopeSubQuery_${referrer.ReferrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotInScopeSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotInScopeSubQuery_${referrer.ReferrerPropertyNameInitCap}")
#end

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#end

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#end

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#if (!${referrer.isOneToOne()})
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_DerivedReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_DerivedReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
           _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#end
#end
#end
#if (${col.isJavaNativeNumberObject()})
#if (${col.isSingleKeyForeignKey()} && !${col.foreignKey.hasFixedCondition()})
#set ($relatedCBClassName = "${col.foreignKey.foreignTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${col.foreignKey.foreignTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${referrer.ReferrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${referrer.ReferrerPropertyNameInitCap}")
#end

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotInScopeSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotInScopeSubQuery_${referrer.ReferrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotInScopeSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotInScopeSubQuery_${referrer.ReferrerPropertyNameInitCap}")
#end

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#end

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($relationPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#end

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#if (!${referrer.isOneToOne()})
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_DerivedReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_DerivedReferrer_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

        protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
        public Map<${subQueryKeepMapGeneric}> ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}Map; }}
        public override String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new LinkedHashMap<${subQueryKeepMapGeneric}>(); }
            String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
            _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyNameInitCap}." + key;
        }
#end
#end
#end
#end

        public ${myClassName} AddOrderBy_${tmpJavaName}_Asc() { regOBA("${col.name}");return this; }
        public ${myClassName} AddOrderBy_${tmpJavaName}_Desc() { regOBD("${col.name}");return this; }
#end

        // ===============================================================================
        //                                                       Specified Derived OrderBy
        //                                                       =========================
        public ${myClassName} AddSpecifiedDerivedOrderBy_Asc(String aliasName) { registerSpecifiedDerivedOrderBy_Asc(aliasName); return this; }
        public ${myClassName} AddSpecifiedDerivedOrderBy_Desc(String aliasName) { registerSpecifiedDerivedOrderBy_Desc(aliasName); return this; }

        // ===============================================================================
        //                                                                     Union Query
        //                                                                     ===========
        public override void reflectRelationOnUnionQuery(${glConditionQuery} baseQueryAsSuper, ${glConditionQuery} unionQueryAsSuper) {
#if ($table.hasForeignKeyOrRefererAsOne())
            ${myConditionQueryClassName} baseQuery = (${myConditionQueryClassName})baseQueryAsSuper;
            ${myConditionQueryClassName} unionQuery = (${myConditionQueryClassName})unionQueryAsSuper;
#end
#foreach ($fk in $table.foreignKeys)
            if (baseQuery.hasConditionQuery${fk.foreignPropertyNameInitCap}()) {
#if ($fk.hasDynamicFixedCondition())
                unionQuery.xsetParameterMap${fk.foreignPropertyNameInitCap}(baseQuery.parameterMap${fk.foreignPropertyNameInitCap});
                unionQuery.ConditionQuery${fk.foreignPropertyNameInitCap}.reflectRelationOnUnionQuery(baseQuery.ConditionQuery${fk.foreignPropertyNameInitCap}, unionQuery.ConditionQuery${fk.foreignPropertyNameInitCap});
#else
                unionQuery.Query${fk.foreignPropertyNameInitCap}().reflectRelationOnUnionQuery(baseQuery.Query${fk.foreignPropertyNameInitCap}(), unionQuery.Query${fk.foreignPropertyNameInitCap}());
#end
            }
#end
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
            if (baseQuery.hasConditionQuery${referrer.referrerPropertyNameInitCapAsOne}()) {
                unionQuery.Query${referrer.referrerPropertyNameInitCapAsOne}().reflectRelationOnUnionQuery(baseQuery.Query${referrer.referrerPropertyNameInitCapAsOne}(), unionQuery.Query${referrer.referrerPropertyNameInitCapAsOne}());
            }
#end
#end

        }
    
        // ===============================================================================
        //                                                                   Foreign Query
        //                                                                   =============
#foreach ($fk in $table.foreignKeys)
#set ($foreignCQClassName = "${glProjectPrefix}${fk.foreignTable.JavaName}${glConditionQueryInitialName}")
#set ($dynamicFixedConditionArgs = "")
#if ($fk.hasDynamicFixedCondition())
#set ($dynamicFixedConditionArgs = "${fk.dynamicFixedConditionArgs}")
#end
        protected ${foreignCQClassName} _conditionQuery${fk.ForeignPropertyNameInitCap};
        public ${foreignCQClassName} Query${fk.ForeignPropertyNameInitCap}(${dynamicFixedConditionArgs}) {
#if ($fk.hasDynamicFixedCondition())
            Map<String, Object> parameterMap = parameterMap${fk.foreignPropertyNameInitCap};
            ${fk.dynamicFixedConditionParameterMapSetup}
#end
            return this.ConditionQuery${fk.ForeignPropertyNameInitCap};
        }
        public ${foreignCQClassName} ConditionQuery${fk.ForeignPropertyNameInitCap} {
            get {
                if (_conditionQuery${fk.foreignPropertyNameInitCap} == null) {
                    _conditionQuery${fk.foreignPropertyNameInitCap} = xcreateQuery${fk.ForeignPropertyNameInitCap}();
                    xsetupOuterJoin_${fk.foreignPropertyNameInitCap}();
                }
                return _conditionQuery${fk.ForeignPropertyNameInitCap};
            }
        }
#if ($fk.hasDynamicFixedCondition())
        protected Map<String, Object> _parameterMap${fk.foreignPropertyNameInitCap};
        public Map<String, Object> parameterMap${fk.foreignPropertyNameInitCap} { get {
            if (_parameterMap${fk.foreignPropertyNameInitCap} == null) {
                _parameterMap${fk.foreignPropertyNameInitCap} = new LinkedHashMap<String, Object>();
            }
            return _parameterMap${fk.foreignPropertyNameInitCap};
        }}
        public void xsetParameterMap${fk.foreignPropertyNameInitCap}(Map<String, Object> parameterMap) {
            _parameterMap${fk.foreignPropertyNameInitCap} = parameterMap; // for UnionQuery
        }
#end
        protected ${foreignCQClassName} xcreateQuery${fk.ForeignPropertyNameInitCap}() {
            String nrp = resolveNextRelationPath${fk.foreignPropertyNameInitCap}();
            String jan = resolveJoinAliasName(nrp, getNextNestLevel());
            ${foreignCQClassName} cq = new ${foreignCQClassName}(this, getSqlClause(), jan, getNextNestLevel());
            cq.xsetForeignPropertyName("${fk.foreignPropertyName}"); cq.xsetRelationPath(nrp); return cq;
        }
        public void xsetupOuterJoin_${fk.ForeignPropertyNameInitCap}() {
            ${foreignCQClassName} cq = ConditionQuery${fk.foreignPropertyNameInitCap};
            Map<String, String> joinOnMap = new LinkedHashMap<String, String>();
#foreach ($columnName in $fk.LocalColumns)
#set ($localColumn = $table.getColumn($columnName))
#set ($foreignColumnName = $fk.getLocalForeignMapping().get($columnName))
            joinOnMap.put(getRealColumnName("${localColumn.name}"), cq.getRealColumnName("${foreignColumnName}"));
#end
#if ($fk.hasFixedCondition())
            joinOnMap.put("$$fixedCondition$$", ppFxCd("${fk.fixedCondition}", getRealAliasName(), cq.getRealAliasName()));
#end
            registerOuterJoin(cq, joinOnMap);
        }
        protected String resolveNextRelationPath${fk.foreignPropertyNameInitCap}() {
            return resolveNextRelationPath("${table.name}", "${fk.foreignPropertyName}");
        }
        public bool hasConditionQuery${fk.ForeignPropertyNameInitCap}() {
            return _conditionQuery${fk.ForeignPropertyNameInitCap} != null;
        }
#end

  #foreach ($referrer in $table.referrers)
    #set ($relatedCQClassName = "${glProjectPrefix}${referrer.table.javaName}${glConditionQueryInitialName}")
    #if (${referrer.isOneToOne()})

        protected ${relatedCQClassName} _conditionQuery${referrer.ReffererPropertyNameInitCapAsOne};
        public ${relatedCQClassName} ConditionQuery${referrer.ReffererPropertyNameInitCapAsOne} {
            get {
                if (_conditionQuery${referrer.referrerPropertyNameInitCapAsOne} == null) {
                    _conditionQuery${referrer.referrerPropertyNameInitCapAsOne} = createQuery${referrer.referrerPropertyNameInitCapAsOne}();
                    xsetupOuterJoin_${referrer.referrerPropertyNameInitCapAsOne}();
                }
                return _conditionQuery${referrer.ReffererPropertyNameInitCapAsOne};
            }
        }
        public ${relatedCQClassName} Query${referrer.referrerPropertyNameInitCapAsOne}() { return this.ConditionQuery${referrer.referrerPropertyNameInitCapAsOne}; }
        protected ${relatedCQClassName} createQuery${referrer.referrerPropertyNameInitCapAsOne}() {
            String nrp = resolveNextRelationPath${referrer.ReferrerPropertyNameInitCapAsOne}();
            String jan = resolveJoinAliasName(nrp, getNextNestLevel());
            ${relatedCQClassName} cq = new ${relatedCQClassName}(this, getSqlClause(), jan, getNextNestLevel());
            cq.xsetForeignPropertyName("${referrer.referrerPropertyNameAsOne}"); cq.xsetRelationPath(nrp); return cq;
        }
        public void xsetupOuterJoin_${referrer.ReffererPropertyNameInitCapAsOne}() {
            ${relatedCQClassName} cq = ConditionQuery${referrer.referrerPropertyNameInitCapAsOne};
            Map<String, String> joinOnMap = new LinkedHashMap<String, String>();
#foreach ($columnName in $referrer.foreignColumns)
#set ($foreignColumn = $table.getColumn($columnName))
#set ($refererColumnName = $referrer.getForeignLocalMapping().get($columnName))
            joinOnMap.put(getRealColumnName("${foreignColumn.name}"), cq.getRealColumnName("${refererColumnName}"));
#end
#if ($referrer.hasFixedCondition())
            joinOnMap.put("$$fixedCondition$$", ppFxCd("${referrer.fixedCondition}", getRealAliasName(), cq.getRealAliasName()));
#end
            registerOuterJoin(cq, joinOnMap);
        }
        protected String resolveNextRelationPath${referrer.ReffererPropertyNameInitCapAsOne}() {
            return resolveNextRelationPath("${table.name}", "${referrer.referrerPropertyNameAsOne}");
        }
        public bool hasConditionQuery${referrer.ReffererPropertyNameInitCapAsOne}() {
            return _conditionQuery${referrer.ReffererPropertyNameInitCapAsOne} != null;
        }
#end
#end

    }
}
