#set ($myClassName = "${myBaseConditionBeanClassName}")

using System;
using System.Collections;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonHelper};

using ${glPackageCB};
using ${glPackageCQ};
using ${glPackageNss};

namespace ${glPackageBaseCB} {

    [System.Serializable]
    public class ${myClassName} : ${glAbstractConditionBean} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected ${myConditionQueryClassName} _conditionQuery;

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        public override String TableDbName { get { return "${table.name}"; } }
        public override String TableSqlName { get { return "${table.tableSqlName}"; } }

        // ===============================================================================
        //                                                                  Add OrderBy PK
        //                                                                  ==============
        public override ${glConditionBean} AddOrderBy_PK_Asc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.primaryKey)
            Query().AddOrderBy_${col.JavaName}_Asc();
#end
            return this;
#else
            String msg = "This method is unsupported in this table that doesn't have primary key: ";
            throw new NotSupportedException(msg + ToString());
#end
        }

        /// <summary>${database.ImplementComment}</summary><returns>this. (NotNull)</returns>
        public override ${glConditionBean} AddOrderBy_PK_Desc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.PrimaryKey)
            Query().AddOrderBy_${col.JavaName}_Desc();
#end
            return this;
#else
            String msg = "This method is unsupported in this table that doesn't have primary key: ";
            throw new NotSupportedException(msg + ToString());
#end
        }

        // ===============================================================================
        //                                                                           Query
        //                                                                           =====
        public ${myConditionQueryClassName} Query() {
            return this.ConditionQuery;
        }

        public ${myConditionQueryClassName} ConditionQuery {
            get {
                if (_conditionQuery == null) {
                    _conditionQuery = new ${myConditionQueryClassName}(null, this.SqlClause, this.SqlClause.getLocalTableAliasName(), 0);
                }
                return _conditionQuery;
            }
        }

        public override ${glPackageBaseCommonCBean}.${glConditionQuery} LocalCQ {
            get { return this.ConditionQuery; }
        }

        // ===============================================================================
        //                                                                     Union Query
        //                                                                     ===========
	    public virtual void Union(${glUnionQuery}<${myConditionBeanClassName}> unionQuery) {
            ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); unionQuery.Invoke(cb);
		    ${myConditionQueryClassName} cq = cb.Query(); Query().xsetUnionQuery(cq);
        }

	    public virtual void UnionAll(${glUnionQuery}<${myConditionBeanClassName}> unionQuery) {
            ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); unionQuery.Invoke(cb);
		    ${myConditionQueryClassName} cq = cb.Query(); Query().xsetUnionAllQuery(cq);
	    }

        public override bool HasUnionQueryOrUnionAllQuery() {
            return Query().hasUnionQueryOrUnionAllQuery();
        }
    
        // ===============================================================================
        //                                                                    Setup Select
        //                                                                    ============
#foreach ($fk in $table.foreignKeys)
#set ($tmpPropertyName = "${fk.foreignPropertyNameInitCap}")
#set ($tmpPropertyNameInitCap = "${fk.foreignPropertyNameInitCap}")
#set ($nestSelectSetuppperClassName = "${glProjectPrefix}${fk.foreignTable.javaName}Nss")
#set ($dynamicFixedConditionArgs = "")
#set ($dynamicFixedConditionVariables = "")
#if ($fk.hasDynamicFixedCondition())
#set ($dynamicFixedConditionArgs = "${fk.dynamicFixedConditionArgs}")
#set ($dynamicFixedConditionVariables = "${fk.dynamicFixedConditionVariables}")
#end
        protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
        public ${nestSelectSetuppperClassName} Nss${tmpPropertyNameInitCap} { get {
            if (_nss${tmpPropertyNameInitCap} == null) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null); }
            return _nss${tmpPropertyNameInitCap};
        }}
        public ${nestSelectSetuppperClassName} SetupSelect_${tmpPropertyNameInitCap}(${dynamicFixedConditionArgs}) {
            doSetupSelect(delegate { return Query().Query${tmpPropertyNameInitCap}(${dynamicFixedConditionVariables}); });
            if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.HasConditionQuery)
            { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(Query().Query${tmpPropertyNameInitCap}(${dynamicFixedConditionVariables})); }
            return _nss${tmpPropertyNameInitCap};
        }
#end
#foreach ($referrer in $table.referrers)
  #if (${referrer.isOneToOne()})
    #set ($tmpPropertyName = "${referrer.referrerPropertyNameInitCapAsOne}")
    #set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
    #set ($nestSelectSetuppperClassName = "${referrer.referrerTableNestSelectSetupperClassName}")

        protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
        public ${nestSelectSetuppperClassName} Nss${tmpPropertyNameInitCap} { get {
            if (_nss${tmpPropertyNameInitCap} == null) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null); }
            return _nss${tmpPropertyNameInitCap};
        }}
        public ${nestSelectSetuppperClassName} SetupSelect_${tmpPropertyNameInitCap}() {
            doSetupSelect(delegate { return Query().Query${tmpPropertyNameInitCap}(); });
            if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.HasConditionQuery)
            { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(Query().Query${tmpPropertyNameInitCap}()); }
            return _nss${tmpPropertyNameInitCap};
        }
  #end
#end

        // [DBFlute-0.7.4]
        // ===============================================================================
        //                                                                         Specify
        //                                                                         =======
        protected ${myConditionBeanClassName}Specification _specification;
        public ${myConditionBeanClassName}Specification Specify() {
            if (_specification == null) { _specification = new ${myConditionBeanClassName}Specification(this, new MySpQyCall(this), _forDerivedReferrer, _forScalarSelect); }
            return _specification;
        }
        protected class MySpQyCall : SpQyCall<${myConditionQueryClassName}> {
			protected ${myClassName} _myCB;
			public MySpQyCall(${myClassName} myCB) { _myCB = myCB; }
    		public bool has() { return true; } public ${myConditionQueryClassName} qy() { return _myCB.Query(); }
    	}
    }
	
    public class ${myConditionBeanClassName}Specification : AbstractSpecification<${myConditionQueryClassName}> {
        protected SpQyCall<${myConditionQueryClassName}> _myQyCall;
#foreach ($fk in $table.foreignKeys)
#set ($tmpPropertyName = "${fk.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${fk.foreignPropertyNameInitCap}")
#set ($tmpCBClassName = "${fk.foreignTableExtendedConditionBeanClassName}")
        protected ${tmpCBClassName}Specification _${tmpPropertyName};
#end
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($tmpCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
        protected ${tmpCBClassName}Specification _${tmpPropertyName};
#end
#end
        public ${myConditionBeanClassName}Specification(${glConditionBean} baseCB, SpQyCall<${myConditionQueryClassName}> qyCall, bool forDerivedReferrer, bool forScalarSelect)
        : base(baseCB, qyCall, forDerivedReferrer, forScalarSelect) { _myQyCall = qyCall; }
#foreach ($col in $table.columns)
        public void Column${col.javaName}() { doColumn("${col.name}"); }
#end
        protected override void doSpecifyRequiredColumn() {
#foreach ($col in $table.primaryKey)
            Column${col.javaName}();// PK
#end
#foreach ($foreignKey in $table.foreignKeys)
#set ($tmpPropertyName = "${foreignKey.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${foreignKey.foreignPropertyNameInitCap}")
            if (_myQyCall.qy().hasConditionQuery${tmpPropertyNameInitCap}()) {
#foreach ($col in $foreignKey.localColumnList)
#if (!$col.isPrimaryKey())
                Column${col.javaName}();// FK
#end
#end
            }
#end
        }
        protected override String getTableDbName() { return "$table.name"; }
#foreach ($fk in $table.foreignKeys)
#set ($tmpPropertyName = "${fk.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${fk.foreignPropertyNameInitCap}")
#set ($tmpCBClassName = "${fk.foreignTableExtendedConditionBeanClassName}")
#set ($tmpCQClassName = "${fk.foreignTableExtendedConditionQueryClassName}")
        public ${tmpCBClassName}Specification Specify${tmpPropertyNameInitCap}() {
            assertForeign("${tmpPropertyName}");
            if (_${tmpPropertyName} == null) { _${tmpPropertyName} = new ${tmpCBClassName}Specification(_baseCB, new ${tmpPropertyNameInitCap}SpQyCall(_myQyCall), _forDerivedReferrer, _forScalarSelect); }
            return _${tmpPropertyName};
        }
		public class ${tmpPropertyNameInitCap}SpQyCall : SpQyCall<${tmpCQClassName}> {
		    protected SpQyCall<${myConditionQueryClassName}> _myQyCall;
		    public ${tmpPropertyNameInitCap}SpQyCall(SpQyCall<${myConditionQueryClassName}> myQyCall) { _myQyCall = myQyCall; }
		    public bool has() { return _myQyCall.has() && _myQyCall.qy().hasConditionQuery${tmpPropertyNameInitCap}(); }
#if ($fk.hasDynamicFixedCondition())
			public ${tmpCQClassName} qy() { return _myQyCall.qy().ConditionQuery${tmpPropertyNameInitCap}; }
#else
			public ${tmpCQClassName} qy() { return _myQyCall.qy().Query${tmpPropertyNameInitCap}(); }
#end
		}
#end
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($tmpCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($tmpCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
        public ${tmpCBClassName}Specification Specify${tmpPropertyNameInitCap}() {
            assertForeign("${tmpPropertyName}");
            if (_${tmpPropertyName} == null) { _${tmpPropertyName} = new ${tmpCBClassName}Specification(_baseCB, new ${tmpPropertyNameInitCap}SpQyCall(_myQyCall), _forDerivedReferrer, _forScalarSelect); }
            return _${tmpPropertyName};
        }
		public class ${tmpPropertyNameInitCap}SpQyCall : SpQyCall<${tmpCQClassName}> {
		    protected SpQyCall<${myConditionQueryClassName}> _myQyCall;
		    public ${tmpPropertyNameInitCap}SpQyCall(SpQyCall<${myConditionQueryClassName}> myQyCall) { _myQyCall = myQyCall; }
		    public bool has() { return _myQyCall.has() && _myQyCall.qy().hasConditionQuery${tmpPropertyNameInitCap}(); }
			public ${tmpCQClassName} qy() { return _myQyCall.qy().Query${tmpPropertyNameInitCap}(); }
		}
#end
#end
#foreach ($referrer in $table.singleKeyStringOrIntegerReferrers)
#if (!${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.referrerPropertyName}")
#set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($tmpCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($tmpLocalCQClassName = "${referrer.foreignTableExtendedConditionQueryClassName}")
        public RAFunction<${tmpCBClassName}, ${tmpLocalCQClassName}> Derived${tmpPropertyNameInitCap}() {
            return new RAFunction<${tmpCBClassName}, ${tmpLocalCQClassName}>(_baseCB, _myQyCall.qy(), delegate(String function, ${glSubQuery}<${tmpCBClassName}> subQuery, ${tmpLocalCQClassName} cq, String aliasName) { cq.xderive${referrer.referrerPropertyNameInitCap}(function, subQuery, aliasName); });
        }
#end
#end
    }
}
