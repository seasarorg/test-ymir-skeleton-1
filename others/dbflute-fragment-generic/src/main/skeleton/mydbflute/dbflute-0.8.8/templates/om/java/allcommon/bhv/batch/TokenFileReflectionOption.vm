${database.allClassCopyright}package ${glPackageBaseCommonBhvBatch};

import ${glPackageBaseCommonHelperTokenFile}.${glFileTokenizingOption};

/**
 * @author ${database.ClassAuthor}
 */
public class ${glTokenFileReflectionOption} {

    // =====================================================================================
    //                                                                             Attribute
    //                                                                             =========
    protected boolean _interruptIfError;

    protected ${glFileTokenizingOption} _fileTokenizingOption = new ${glFileTokenizingOption}();

    // =====================================================================================
    //                                                                           Easy-to-Use
    //                                                                           ===========
    public ${glTokenFileReflectionOption} delimitateByComma() {
        _fileTokenizingOption.delimitateByComma();
        return this;
    }

    public ${glTokenFileReflectionOption} delimitateByTab() {
        _fileTokenizingOption.delimitateByTab();
        return this;
    }

    public ${glTokenFileReflectionOption} encodeAsUTF8() {
        _fileTokenizingOption.encodeAsUTF8();
        return this;
    }

    public ${glTokenFileReflectionOption} encodeAsWindows31J() {
        _fileTokenizingOption.encodeAsWindows31J();
        return this;
    }

    public ${glTokenFileReflectionOption} handleEmptyAsNull() {
        _fileTokenizingOption.handleEmptyAsNull();
        return this;
    }

    public ${glTokenFileReflectionOption} interruptIfError() {
        _interruptIfError = true;
        return this;
    }

    // =====================================================================================
    //                                                                              Accessor
    //                                                                              ========
    public String getDelimiter() {
        return _fileTokenizingOption.getDelimiter();
    }

    public void setDelimiter(String delimiter) {
        _fileTokenizingOption.setDelimiter(delimiter);
    }

    public String getEncoding() {
        return _fileTokenizingOption.getEncoding();
    }

    public void setEncoding(String encoding) {
        _fileTokenizingOption.setDelimiter(encoding);
    }

    public boolean isHandleEmptyAsNull() {
        return _fileTokenizingOption.isHandleEmptyAsNull();
    }

    public boolean isInterruptIfError() {
        return _interruptIfError;
    }
}
