${database.allClassCopyright}package ${glPackageBaseCommonCKey};

#set ($myClassName = "${glConditionKey}NotLikeSearch")
import java.util.List;

import ${glPackageBaseCommonCOption}.${glConditionOption};
import ${glPackageBaseCommonCOption}.${glLikeSearchOption};
import ${glPackageBaseCommonCValue}.${glConditionValue};

/**
 * The condition-key of notLikeSearch.
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} extends ${glConditionKey} {

    /**
     * Constructor.
     */
    protected ${myClassName}() {
        _conditionKey = "notLikeSearch";
        _operand = "not like";
    }

    /**
     * Is valid registration?
     * @param conditionValue Condition value. (NotNull)
     * @param value Value. (NotNull)
     * @param callerName Caller name. (NotNull)
     * @return Determination.
     */
    public boolean isValidRegistration(${glConditionValue} conditionValue, Object value, String callerName) {
        if (value == null) {
            return false;
        }
        return true;
    }

    /**
     * This method implements super#doAddWhereClause().
     * @param conditionList Condition list. (NotNull)
     * @param columnName Column name. (NotNull)
     * @param value Condition value. (NotNull)
     */
    protected void doAddWhereClause(List<String> conditionList, String columnName, ${glConditionValue} value) {
        throw new UnsupportedOperationException("doAddWhereClause without condition-option is unsupported!!!");
    }

    /**
     * This method implements super#doAddWhereClause().
     * @param conditionList Condition list. (NotNull)
     * @param columnName Column name. (NotNull)
     * @param value Condition value. (NotNull)
     * @param option Condition option. (NotNull)
     */
    protected void doAddWhereClause(List<String> conditionList, String columnName, ${glConditionValue} value, ${glConditionOption} option) {
        if (option == null) {
            String msg = "The argument[option] should not be null: columnName=" + columnName + " value=" + value;
            throw new IllegalArgumentException(msg);
        }
        if (!(option instanceof ${glLikeSearchOption})) {
            String msg = "The argument[option] should be ${glLikeSearchOption}: columnName=" + columnName + " value=" + value;
            throw new IllegalArgumentException(msg);
        }
        final ${glLikeSearchOption} myOption = (${glLikeSearchOption})option;
        conditionList.add(buildBindClauseWithRearOption(columnName, value.getNotLikeSearchLocation(), myOption.getRearOption()));
    }

    /**
     * This method implements super#doSetupConditionValue().
     * @param conditionValue Condition value. (NotNull)
     * @param value Value. (NotNull)
     * @param location Location. (NotNull)
     */
    protected void doSetupConditionValue(${glConditionValue} conditionValue, Object value, String location) {
        throw new UnsupportedOperationException("doSetupConditionValue without condition-option is unsupported!!!");
    }

    /**
     * This method implements super#doSetupConditionValue().
     * @param conditionValue Condition value. (NotNull)
     * @param value Value. (NotNull)
     * @param location Location. (NotNull)
     * @param option Condition option. (NotNull)
     */
    protected void doSetupConditionValue(${glConditionValue} conditionValue, Object value, String location, ${glConditionOption} option) {
        conditionValue.setNotLikeSearch((String)value, (${glLikeSearchOption})option).setNotLikeSearchLocation(location);
    }
}
