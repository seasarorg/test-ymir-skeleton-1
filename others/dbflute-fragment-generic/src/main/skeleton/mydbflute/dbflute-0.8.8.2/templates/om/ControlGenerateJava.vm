#
# @until DBFlute-0.8.x
#

targetdatabase = $targetDatabase

##
## Loop by data-model.
##
#foreach ($dataModel in $dataModels)

  ##
  ## Loop by database.
  ##
  #foreach ($database in $dataModel.Databases)
    $database.enableGenerateOutputDirectory()

    ## - - - - - - - - - - - -
    ## Initialize properties.
    ## - - - - - - - - - - - -
    $database.initializeAdditionalPrimaryKey()
    $database.initializeAdditionalForeignKey()
    $database.initializeClassificationDeployment()
    $database.initializeIncludeQuery()
    $database.checkProperties()

    ## *****************************************************************************************************************
    ##                                                                                                   Global Paramter
    ##                                                                                                   ***************
    ## ===================================================================================
    ##                                                                            Language
    ##                                                                            ========
    #set ($glTargetLanguage = ${database.targetLanguage})

    ## ===================================================================================
    ##                                                                  Resource Directory
    ##                                                                  ==================
    #set ($glResourceDirectory = ${database.resourceDirectory})

    ## ===================================================================================
    ##                                                                           Extension
    ##                                                                           =========
    #set ($glTemplateFileExtension = ${database.templateFileExtension})
    #set ($glClassFileExtension = ${database.classFileExtension})

    ## -----------------------------------------------------
    ##                                                Prefix
    ##                                                ------
    #set ($glProjectPrefix = ${database.projectPrefix})
    #set ($glBasePrefix = ${database.basePrefix})
    #set ($glBaseSuffixForEntity = ${database.baseSuffixForEntity})

    ## -----------------------------------------------------
    ##                                                 Dicon
    ##                                                 -----
    #set ($glDBFluteDiconNamespace = "${database.DBFluteDiconNamespace}")
    #set ($glDBFluteDiconFileName = "${database.DBFluteDiconFileName}")
    #set ($glCreatorDiconFileName = "${database.DBFluteCreatorDiconFileName}")
    #set ($glCustomizerDiconFileName = "${database.DBFluteCustomizerDiconFileName}")
    #set ($glJ2eeDiconResourceName = "${database.j2eeDiconResourceName}")
    #set ($glDBFluteBeansFileName = "${database.DBFluteBeansFileName}")

    ## -----------------------------------------------------
    ##                                            Class Name
    ##                                            ----------
    ## [Allcommon]
    #set ($glAccessContext = "${glProjectPrefix}AccessContext")
    #set ($glBuriDef = "${glProjectPrefix}BuriDef")
    #set ($glCallbackContext = "${glProjectPrefix}CallbackContext")
    #set ($glCacheAbstractSelector = "${glProjectPrefix}CacheAbstractSelector")
    #set ($glCacheBehaviorSelector = "${glProjectPrefix}CacheBehaviorSelector")
    #set ($glCDef = "${glProjectPrefix}CDef")
    #set ($glCommonColumnAutoSetupper = "${glProjectPrefix}CommonColumnAutoSetupper")
    #set ($glDBCurrent = "${glProjectPrefix}DBCurrent")
    #set ($glDBDef = "${glProjectPrefix}DBDef")
    #set ($glDBFluteConfig = "${glProjectPrefix}DBFluteConfig")
    #set ($glDBFluteInitializer = "${glProjectPrefix}DBFluteInitializer")
    #set ($glEntity = "${glProjectPrefix}Entity")
    #set ($glEntityDefinedCommonColumn = "${glProjectPrefix}EntityDefinedCommonColumn")
    #set ($glBehaviorSelector = "${glProjectPrefix}BehaviorSelector")
    #set ($glImplementedCommonColumnAutoSetupper = "${glProjectPrefix}ImplementedCommonColumnAutoSetupper")
    #set ($glImplementedInvokerAssistant = "${glProjectPrefix}ImplementedInvokerAssistant")
    #set ($glImplementedSqlClauseCreator = "${glProjectPrefix}ImplementedSqlClauseCreator")
    #set ($glInternalMapContext = "${glProjectPrefix}InternalMapContext")
    #set ($glQLog = "${glProjectPrefix}QLog")
    #set ($glXLog = "${glProjectPrefix}XLog")

    ## [Allcommon-Behavior]
    #set ($glBehaviorReadable = "${glProjectPrefix}BehaviorReadable")
    #set ($glBehaviorWritable = "${glProjectPrefix}BehaviorWritable")
    #set ($glAbstractBehaviorReadable = "${glProjectPrefix}AbstractBehaviorReadable")
    #set ($glAbstractBehaviorWritable = "${glProjectPrefix}AbstractBehaviorWritable")

    ## [Allcommon-Behavior-Batch]
    #set ($glTokenFileReflectionOption = "${glProjectPrefix}TokenFileReflectionOption")
    #set ($glTokenFileReflectionResult = "${glProjectPrefix}TokenFileReflectionResult")
    #set ($glTokenFileReflectionFailure = "${glProjectPrefix}TokenFileReflectionFailure")
    #set ($glTokenFileOutputOption = "${glProjectPrefix}TokenFileOutputOption")
    #set ($glTokenFileOutputResult = "${glProjectPrefix}TokenFileOutputResult")

    ## [Allcommon-Behavior-Core]
    #set ($glBehaviorCommand = "${glProjectPrefix}BehaviorCommand")
    #set ($glBehaviorCommandComponentSetup = "${glProjectPrefix}BehaviorCommandComponentSetup")
    #set ($glBehaviorCommandInvoker = "${glProjectPrefix}BehaviorCommandInvoker")
    #set ($glBehaviorInitializer = "${glProjectPrefix}BehaviorInitializer")
    #set ($glInvokerAssistant = "${glProjectPrefix}InvokerAssistant")
    #set ($glResourceContext = "${glProjectPrefix}ResourceContext")
    #set ($glResourceParameter = "${glProjectPrefix}ResourceParameter")
    #set ($glSqlExecution = "${glProjectPrefix}SqlExecution")
    #set ($glSqlExecutionCreator = "${glProjectPrefix}SqlExecutionCreator")

    ## [Allcommon-Behavior-Core-Command]
    #set ($glAbstractBehaviorCommand = "${glProjectPrefix}AbstractBehaviorCommand")
    #set ($glAbstractEntityCommand = "${glProjectPrefix}AbstractEntityCommand")
    #set ($glAbstractListEntityCommand = "${glProjectPrefix}AbstractListEntityCommand")
    #set ($glAbstractOutsideSqlCommand = "${glProjectPrefix}AbstractOutsideSqlCommand")
    #set ($glAbstractOutsideSqlSelectCommand = "${glProjectPrefix}AbstractOutsideSqlSelectCommand")
    #set ($glAbstractSelectCBCommand = "${glProjectPrefix}AbstractSelectCBCommand")
    #set ($glBatchDeleteEntityCommand = "${glProjectPrefix}BatchDeleteEntityCommand")
    #set ($glBatchDeleteNonstrictEntityCommand = "${glProjectPrefix}BatchDeleteNonstrictEntityCommand")
    #set ($glBatchInsertEntityCommand = "${glProjectPrefix}BatchInsertEntityCommand")
    #set ($glBatchUpdateEntityCommand = "${glProjectPrefix}BatchUpdateEntityCommand")
    #set ($glBatchUpdateNonstrictEntityCommand = "${glProjectPrefix}BatchUpdateNonstrictEntityCommand")
    #set ($glDeleteEntityCommand = "${glProjectPrefix}DeleteEntityCommand")
    #set ($glDeleteNonstrictEntityCommand = "${glProjectPrefix}DeleteNonstrictEntityCommand")
    #set ($glInsertEntityCommand = "${glProjectPrefix}InsertEntityCommand")
    #set ($glOutsideSqlCallCommand = "${glProjectPrefix}OutsideSqlCallCommand")
    #set ($glOutsideSqlExecuteCommand = "${glProjectPrefix}OutsideSqlExecuteCommand")
    #set ($glOutsideSqlSelectCursorCommand = "${glProjectPrefix}OutsideSqlSelectCursorCommand")
    #set ($glOutsideSqlSelectListCommand = "${glProjectPrefix}OutsideSqlSelectListCommand")
    #set ($glQueryDeleteCBCommand = "${glProjectPrefix}QueryDeleteCBCommand")
    #set ($glQueryUpdateEntityCBCommand = "${glProjectPrefix}QueryUpdateEntityCBCommand")
    #set ($glSelectCountCBCommand = "${glProjectPrefix}SelectCountCBCommand")
    #set ($glSelectListCBCommand = "${glProjectPrefix}SelectListCBCommand")
    #set ($glSelectNextValCommand = "${glProjectPrefix}SelectNextValCommand")
    #set ($glSelectScalarCBCommand = "${glProjectPrefix}SelectScalarCBCommand")
    #set ($glUpdateEntityCommand = "${glProjectPrefix}UpdateEntityCommand")
    #set ($glUpdateNonstrictEntityCommand = "${glProjectPrefix}UpdateNonstrictEntityCommand")

    ## [Allcommon-Behavior-Core-Execution]
    #set ($glBasicSelectExecution = "${glProjectPrefix}BasicSelectExecution")
    #set ($glOutsideSqlSelectExecution = "${glProjectPrefix}OutsideSqlSelectExecution")
    #set ($glSelectCBExecution = "${glProjectPrefix}SelectCBExecution")

    ## [Allcommon-Behavior-Load]
    #set ($glLoadReferrerOption = "${glProjectPrefix}LoadReferrerOption")

    ## [Allcommon-Behavior-Setup]
    #set ($glConditionBeanSetupper = "${glProjectPrefix}ConditionBeanSetupper")
    #set ($glEntityListSetupper = "${glProjectPrefix}EntityListSetupper")
    #set ($glValueLabelSetupper = "${glProjectPrefix}ValueLabelSetupper")
    #set ($glValueLabelBox = "${glProjectPrefix}ValueLabelBox")

    ## [Allcommon-ConditionBean]
    #set ($glFetchNarrowingBean = "${glProjectPrefix}FetchNarrowingBean")
    #set ($glSimplePagingBean = "${glProjectPrefix}SimplePagingBean")
    #set ($glConditionBean = "${glProjectPrefix}ConditionBean")
    #set ($glConditionQuery = "${glProjectPrefix}ConditionQuery")
    #set ($glOrderByBean = "${glProjectPrefix}OrderByBean")
    #set ($glPagingBean = "${glProjectPrefix}PagingBean")
    #set ($glSelectResource = "${glProjectPrefix}SelectResource")
    #set ($glFetchNarrowingBeanContext = "${glProjectPrefix}FetchNarrowingBeanContext")
    #set ($glMapParameterBean = "${glProjectPrefix}MapParameterBean")
    #set ($glPagingHandler = "${glProjectPrefix}PagingHandler")
    #set ($glPagingInvoker = "${glProjectPrefix}PagingInvoker")
    #set ($glPagingResultBean = "${glProjectPrefix}PagingResultBean")
    #set ($glListResultBean = "${glProjectPrefix}ListResultBean")
    #set ($glResultBeanBuilder = "${glProjectPrefix}ResultBeanBuilder")
    #set ($glConditionBeanContext = "${glProjectPrefix}ConditionBeanContext")
    #set ($glAbstractConditionBean = "${glProjectPrefix}AbstractConditionBean")
    #set ($glAbstractConditionQuery = "${glProjectPrefix}AbstractConditionQuery")
    #set ($glConditionKey = "${glProjectPrefix}ConditionKey")
    #set ($glConditionValue = "${glProjectPrefix}ConditionValue")
    #set ($glScalarQuery = "${glProjectPrefix}ScalarQuery")
    #set ($glSubQuery = "${glProjectPrefix}SubQuery")
    #set ($glUnionQuery = "${glProjectPrefix}UnionQuery")

    ## [Allcommon-ConditionBean-Option]
    #set ($glConditionOption = "${glProjectPrefix}ConditionOption")
    #set ($glSimpleStringOption = "${glProjectPrefix}SimpleStringOption")
    #set ($glFromToOption = "${glProjectPrefix}FromToOption")
    #set ($glDateFromToOption = "${glProjectPrefix}DateFromToOption")
    #set ($glLikeSearchOption = "${glProjectPrefix}LikeSearchOption")
    #set ($glInScopeOption = "${glProjectPrefix}InScopeOption")
    #set ($glSplitOptionParts = "${glProjectPrefix}SplitOptionParts")
    #set ($glToUpperLowerCaseOptionParts = "${glProjectPrefix}ToUpperLowerCaseOptionParts")
    #set ($glToSingleByteOptionParts = "${glProjectPrefix}ToSingleByteOptionParts")
    #set ($glJapaneseOptionPartsAgent = "${glProjectPrefix}JapaneseOptionPartsAgent")

    ## [Allcommon-ConditionBean-Grouping]
    #set ($glGroupingOption = "${glProjectPrefix}GroupingOption")
    #set ($glGroupingRowEndDeterminer = "${glProjectPrefix}GroupingRowEndDeterminer")
    #set ($glGroupingRowResource = "${glProjectPrefix}GroupingRowResource")
    #set ($glGroupingRowSetupper = "${glProjectPrefix}GroupingRowSetupper")

    ## [Allcommon-ConditionBean-Mapping]
    #set ($glEntityDtoMapper = "${glProjectPrefix}EntityDtoMapper")

    ## [Allcommon-ConditionBean-OutsideSql]
    #set ($glOutsideSqlContext = "${glProjectPrefix}OutsideSqlContext")
    #set ($glOutsideSqlOption = "${glProjectPrefix}OutsideSqlOption")
    #set ($glProcedurePmb = "${glProjectPrefix}ProcedurePmb")

    ## [Allcommon-ConditionBean-OutsideSql-Executor]
    #set ($glOutsideSqlBasicExecutor = "${glProjectPrefix}OutsideSqlBasicExecutor")
    #set ($glOutsideSqlCursorExecutor = "${glProjectPrefix}OutsideSqlCursorExecutor")
    #set ($glOutsideSqlPagingExecutor = "${glProjectPrefix}OutsideSqlPagingExecutor")
    #set ($glOutsideSqlEntityExecutor = "${glProjectPrefix}OutsideSqlEntityExecutor")

    ## [Allcommon-ConditionBean-Pagenavi]
    #set ($glPageNumberLink = "${glProjectPrefix}PageNumberLink")
    #set ($glPageNumberLinkSetupper = "${glProjectPrefix}PageNumberLinkSetupper")
    #set ($glPageGroupBean = "${glProjectPrefix}PageGroupBean")
    #set ($glPageGroupOption = "${glProjectPrefix}PageGroupOption")
    #set ($glPageRangeBean = "${glProjectPrefix}PageRangeBean")
    #set ($glPageRangeOption = "${glProjectPrefix}PageRangeOption")

    ## [Allcommon-ConditionBean-SqlClause]
    #set ($glSqlClause = "${glProjectPrefix}SqlClause")
    #set ($glAbstractSqlClause = "${glProjectPrefix}AbstractSqlClause")
    #set ($glSqlClauseCreator = "${glProjectPrefix}SqlClauseCreator")
    #set ($glOrderByClause = "${glProjectPrefix}OrderByClause")
    #set ($glOrderByElement = "${glProjectPrefix}OrderByElement")
    #set ($glWhereClauseSimpleFilter = "${glProjectPrefix}WhereClauseSimpleFilter")

    ## [Allcommon-DBMeta]
    #set ($glDBMeta = "${glProjectPrefix}DBMeta")
    #set ($glAbstractDBMeta = "${glProjectPrefix}AbstractDBMeta")
    #set ($glDBMetaProvider = "${glProjectPrefix}DBMetaProvider")
    #set ($glDBMetaInstanceHandler = "${glProjectPrefix}DBMetaInstanceHandler")

    ## [Allcommon-DBMetaHierarchy]
    #set ($glHierarchyArranger = "${glProjectPrefix}HierarchyArranger")
    #set ($glHierarchyBasicRequest = "${glProjectPrefix}HierarchyBasicRequest")
    #set ($glHierarchyRequest = "${glProjectPrefix}HierarchyRequest")
    #set ($glHierarchyRequestElement = "${glProjectPrefix}HierarchyRequestElement")
    #set ($glHierarchySourceColumn = "${glProjectPrefix}HierarchySourceColumn")
    #set ($glHierarchySourceIterator = "${glProjectPrefix}HierarchySourceIterator")
    #set ($glHierarchySourceRow = "${glProjectPrefix}HierarchySourceRow")

    ## [Allcommon-DBMetaHierarchyBasic]
    #set ($glHierarchySourceEntityColumn = "${glProjectPrefix}HierarchySourceEntityColumn")
    #set ($glHierarchySourceEntityListIterator = "${glProjectPrefix}HierarchySourceEntityListIterator")
    #set ($glHierarchySourceEntityRow = "${glProjectPrefix}HierarchySourceEntityRow")
    #set ($glHierarchySourceListIterator = "${glProjectPrefix}HierarchySourceListIterator")
    #set ($glHierarchySourceRowSetupper = "${glProjectPrefix}HierarchySourceRowSetupper")

    ## [Allcommon-DBMetaInfo]
    #set ($glForeignInfo = "${glProjectPrefix}ForeignInfo")
    #set ($glReferrerInfo = "${glProjectPrefix}ReferrerInfo")
    #set ($glRelationInfo = "${glProjectPrefix}RelationInfo")
    #set ($glUniqueInfo = "${glProjectPrefix}UniqueInfo")
    #set ($glColumnInfo = "${glProjectPrefix}ColumnInfo")

    ## [Allcommon-Exception]
    #set ($glBatchEntityAlreadyUpdatedException = "${glProjectPrefix}BatchEntityAlreadyUpdatedException")
    #set ($glBindVariableCommentNotFoundPropertyException = "${glProjectPrefix}BindVariableCommentNotFoundPropertyException")
    #set ($glBindVariableParameterNullValueException = "${glProjectPrefix}BindVariableParameterNullValueException")
    #set ($glDangerousResultSizeExceptionName = "${glProjectPrefix}DangerousResultSizeException")
    #set ($glDangerousResultSizeException = "${glProjectPrefix}DangerousResultSizeException")
    #set ($glDBMetaNotFoundException = "${glProjectPrefix}DBMetaNotFoundException")
    #set ($glEmbeddedValueCommentNotFoundPropertyException = "${glProjectPrefix}EmbeddedValueCommentNotFoundPropertyException")
    #set ($glEmbeddedValueParameterNullValueException = "${glProjectPrefix}EmbeddedValueParameterNullValueException")
    #set ($glEndCommentNotFoundException = "${glProjectPrefix}EndCommentNotFoundException")
    #set ($glEntityAlreadyUpdatedException = "${glProjectPrefix}EntityAlreadyUpdatedException")
    #set ($glEntityAlreadyDeletedException = "${glProjectPrefix}EntityAlreadyDeletedException")
    #set ($glEntityAlreadyExistsException = "${glProjectPrefix}EntityAlreadyExistsException")
    #set ($glEntityDuplicatedException = "${glProjectPrefix}EntityDuplicatedException")
    #set ($glIfCommentConditionNotFoundException = "${glProjectPrefix}IfCommentConditionNotFoundException")
    #set ($glIfCommentNotBooleanResultException = "${glProjectPrefix}IfCommentNotBooleanResultException")
    #set ($glIfCommentWrongExpressionException = "${glProjectPrefix}IfCommentWrongExpressionException")
    #set ($glOutsideSqlNotFoundException = "${glProjectPrefix}OutsideSqlNotFoundException")
    #set ($glRequiredOptionNotFoundException = "${glProjectPrefix}RequiredOptionNotFoundException")
    #set ($glRecordHasOverlappedException = "${glProjectPrefix}RecordHasOverlappedException")
    #set ($glRecordHasAlreadyBeenDeletedException = "${glProjectPrefix}RecordHasAlreadyBeenDeletedException")
    #set ($glSQLFailureException = "${glProjectPrefix}SQLFailureException")

    ## [Allcommon-Helper]
    #set ($glMapListString = "${glProjectPrefix}MapListString")
    #set ($glMapListStringImpl = "${glProjectPrefix}MapListStringImpl")
    #set ($glMapStringBuilder = "${glProjectPrefix}MapStringBuilder")
    #set ($glMapStringBuilderImpl = "${glProjectPrefix}MapStringBuilderImpl")
    #set ($glStringKeyMap = "${glProjectPrefix}StringKeyMap")
    #set ($glStringSet = "${glProjectPrefix}StringSet")

    #set ($glGeneralCharacter = "${glProjectPrefix}GeneralCharacter")
    #set ($glGeneralCharacterImpl = "${glProjectPrefix}GeneralCharacterImpl")

    #set ($glJapaneseCharacter = "${glProjectPrefix}JapaneseCharacter")
    #set ($glJapaneseCharacterImpl = "${glProjectPrefix}JapaneseCharacterImpl")

    #set ($glInvokeNameExtractingResource = "${glProjectPrefix}InvokeNameExtractingResource")
    #set ($glInvokeNameExtractor = "${glProjectPrefix}InvokeNameExtractor")
    #set ($glInvokeNameExtractorImpl = "${glProjectPrefix}InvokeNameExtractorImpl")
    #set ($glInvokeNameResult = "${glProjectPrefix}InvokeNameResult")

    #set ($glLineToken = "${glProjectPrefix}LineToken")
    #set ($glLineTokenImpl = "${glProjectPrefix}LineTokenImpl")
    #set ($glLineTokenizingOption = "${glProjectPrefix}LineTokenizingOption")
    #set ($glLineMakingOption = "${glProjectPrefix}LineMakingOption")

    #set ($glFileToken = "${glProjectPrefix}FileToken")
    #set ($glFileTokenImpl = "${glProjectPrefix}FileTokenImpl")

    #set ($glFileTokenizingOption = "${glProjectPrefix}FileTokenizingOption")
    #set ($glFileTokenizingRowResource = "${glProjectPrefix}FileTokenizingRowResource")
    #set ($glFileTokenizingCallback = "${glProjectPrefix}FileTokenizingCallback")
    #set ($glFileTokenizingHeaderInfo = "${glProjectPrefix}FileTokenizingHeaderInfo")

    #set ($glFileMakingOption = "${glProjectPrefix}FileMakingOption")
    #set ($glFileMakingRowResource = "${glProjectPrefix}FileMakingRowResource")
    #set ($glFileMakingCallback = "${glProjectPrefix}FileMakingCallback")
    #set ($glFileMakingHeaderInfo = "${glProjectPrefix}FileMakingHeaderInfo")
    #set ($glFileMakingSimpleFacade = "${glProjectPrefix}FileMakingSimpleFacade")
    #set ($glFileMakingSimpleFacadeImpl = "${glProjectPrefix}FileMakingSimpleFacadeImpl")

    #set ($glAccordingToOrder = "${glProjectPrefix}AccordingToOrder")
    #set ($glAccordingToOrderOption = "${glProjectPrefix}AccordingToOrderOption")
    #set ($glAccordingToOrderIdExtractor = "${glProjectPrefix}AccordingToOrderIdExtractor")
    #set ($glAccordingToOrderImpl = "${glProjectPrefix}AccordingToOrderImpl")

    ## [Allcommon-JavaLike]
    #set ($glJavaBasic = "${glProjectPrefix}JavaBasic")
    #set ($glJavaCollection = "${glProjectPrefix}JavaCollection")
    #set ($glJavaException = "${glProjectPrefix}JavaException")
    #set ($glJavaReflection = "${glProjectPrefix}JavaReflection")

    ## [Allcommon-JDBC]
    #set ($glCursorHandler = "${glProjectPrefix}CursorHandler")
    #set ($glCursorFetcher = "${glProjectPrefix}CursorFetcher")
    #set ($glLatestSqlProvider = "${glProjectPrefix}LatestSqlProvider")
    #set ($glSqlLogHandler = "${glProjectPrefix}SqlLogHandler")
    #set ($glStatementConfig = "${glProjectPrefix}StatementConfig")

    ## [Allcommon-S2Container]
    #set ($glBehaviorCreator = "${glProjectPrefix}BehaviorCreator")

    ## [Allcommon-S2Dao]
    #set ($glBeanMetaDataFactoryExtension = "${glProjectPrefix}BeanMetaDataFactoryExtension")
    #set ($glFetchNarrowingResultSetFactory = "${glProjectPrefix}FetchNarrowingResultSetFactory")
    #set ($glFetchNarrowingResultSetWrapper = "${glProjectPrefix}FetchNarrowingResultSetWrapper")
    #set ($glPropertyTypeFactoryBuilderExtension = "${glProjectPrefix}PropertyTypeFactoryBuilderExtension")
    #set ($glSqlLogRegistryLatestSqlProvider = "${glProjectPrefix}SqlLogRegistryLatestSqlProvider")
    #set ($glS2DaoSetting = "${glProjectPrefix}S2DaoSetting")
    #set ($glTxSetting = "${glProjectPrefix}TxSetting")

    #set ($glS2DaoInterceptor = "${glProjectPrefix}S2DaoInterceptor")
    #set ($glDaoInterceptor = "${glProjectPrefix}S2DaoInterceptor")
    #set ($glS2DaoMetaDataExtension = "${glProjectPrefix}S2DaoMetaDataExtension")
    #set ($glDaoMetaDataExtension = "${glProjectPrefix}S2DaoMetaDataExtension")
    #set ($glS2DaoMetaDataFactoryImpl = "${glProjectPrefix}S2DaoMetaDataFactoryImpl")
    #set ($glDaoMetaDataFactoryImpl = "${glProjectPrefix}S2DaoMetaDataFactoryImpl")
    #set ($glS2DaoSelectDynamicCommand = "${glProjectPrefix}S2DaoSelectDynamicCommand")
    #set ($glSelectDynamicCommand = "${glProjectPrefix}S2DaoSelectDynamicCommand")
    #set ($glDaoStatementFactory = "${glProjectPrefix}S2DaoStatementFactory")

    ## [Allcommon-S2Dao-Internal]
    #set ($glInternalAbstractBeanMetaDataResultSetHandler = "${glProjectPrefix}InternalAbstractBeanMetaDataResultSetHandler")
    #set ($glInternalAbstractDtoMetaDataResultSetHandler = "${glProjectPrefix}InternalAbstractDtoMetaDataResultSetHandler")
    #set ($glInternalBeanArrayMetaDataResultSetHandler = "${glProjectPrefix}InternalBeanArrayMetaDataResultSetHandler")
    #set ($glInternalBeanListMetaDataResultSetHandler = "${glProjectPrefix}InternalBeanListMetaDataResultSetHandler")
    #set ($glInternalBeanGenericListMetaDataResultSetHandler = "${glProjectPrefix}InternalBeanGenericListMetaDataResultSetHandler")

    #set ($glInternalAbstractAutoStaticCommand = "${glProjectPrefix}InternalAbstractAutoStaticCommand")
    #set ($glInternalAbstractBatchAutoStaticCommand = "${glProjectPrefix}InternalAbstractBatchAutoStaticCommand")
    #set ($glInternalAbstractDynamicCommand = "${glProjectPrefix}InternalAbstractDynamicCommand")
    #set ($glInternalAbstractSqlCommand = "${glProjectPrefix}InternalAbstractSqlCommand")
    #set ($glInternalAbstractStaticCommand = "${glProjectPrefix}InternalAbstractStaticCommand")
    #set ($glInternalDeleteAutoStaticCommand = "${glProjectPrefix}InternalDeleteAutoStaticCommand")
    #set ($glInternalDeleteBatchAutoStaticCommand = "${glProjectPrefix}InternalDeleteBatchAutoStaticCommand")
    #set ($glInternalDeleteQueryAutoDynamicCommand = "${glProjectPrefix}InternalDeleteQueryAutoDynamicCommand")
    #set ($glInternalInsertAutoDynamicCommand = "${glProjectPrefix}InternalInsertAutoDynamicCommand")
    #set ($glInternalInsertBatchAutoStaticCommand = "${glProjectPrefix}InternalInsertBatchAutoStaticCommand")
    #set ($glInternalProcedureCommand = "${glProjectPrefix}InternalProcedureCommand")
    #set ($glInternalUpdateAutoDynamicCommand = "${glProjectPrefix}InternalUpdateAutoDynamicCommand")
    #set ($glInternalUpdateBatchAutoStaticCommand = "${glProjectPrefix}InternalUpdateBatchAutoStaticCommand")
    #set ($glInternalUpdateDynamicCommand = "${glProjectPrefix}InternalUpdateDynamicCommand")
    #set ($glInternalUpdateModifiedOnlyCommand = "${glProjectPrefix}InternalUpdateModifiedOnlyCommand")
    #set ($glInternalUpdateQueryAutoDynamicCommand = "${glProjectPrefix}InternalUpdateQueryAutoDynamicCommand")

    #set ($glInternalAbstractAutoHandler = "${glProjectPrefix}InternalAbstractAutoHandler")
    #set ($glInternalAbstractBatchAutoHandler = "${glProjectPrefix}InternalAbstractBatchAutoHandler")
    #set ($glInternalBasicHandler = "${glProjectPrefix}InternalBasicHandler")
    #set ($glInternalBasicSelectHandler = "${glProjectPrefix}InternalBasicSelectHandler")
    #set ($glInternalBasicUpdateHandler = "${glProjectPrefix}InternalBasicUpdateHandler")
    #set ($glInternalCommandContextHandler = "${glProjectPrefix}InternalCommandContextHandler")
    #set ($glInternalDeleteAutoHandler = "${glProjectPrefix}InternalDeleteAutoHandler")
    #set ($glInternalDeleteBatchAutoHandler = "${glProjectPrefix}InternalDeleteBatchAutoHandler")
    #set ($glInternalInsertAutoHandler = "${glProjectPrefix}InternalInsertAutoHandler")
    #set ($glInternalInsertBatchAutoHandler = "${glProjectPrefix}InternalInsertBatchAutoHandler")
    #set ($glInternalProcedureHandler = "${glProjectPrefix}InternalProcedureHandler")
    #set ($glInternalUpdateAutoHandler = "${glProjectPrefix}InternalUpdateAutoHandler")
    #set ($glInternalUpdateBatchAutoHandler = "${glProjectPrefix}InternalUpdateBatchAutoHandler")
    #set ($glInternalSqlLog = "${glProjectPrefix}InternalSqlLog")
    #set ($glInternalSqlLogRegistry = "${glProjectPrefix}InternalSqlLogRegistry")
    #set ($glInternalSqlLogRegistryLocator = "${glProjectPrefix}InternalSqlLogRegistryLocator")
    #set ($glInternalCommandContextCreator = "${glProjectPrefix}InternalCommandContextCreator")
    #set ($glInternalSqlParser = "${glProjectPrefix}InternalSqlParser")
    #set ($glInternalSqlTokenizer = "${glProjectPrefix}InternalSqlTokenizer")
    #set ($glInternalBindVariableUtil = "${glProjectPrefix}InternalBindVariableUtil")

    ## [Allcommon-S2Dao-Internal-ValueType]
    #set ($glInternalBytesOidType = "${glProjectPrefix}InternalBytesOidType")

    ## [Allcommon-S2Dao-Internal-Various]
    #set ($glInternalIdentifierGeneratorFactory = "${glProjectPrefix}InternalIdentifierGeneratorFactory")
    #set ($glInternalIdentifierAbstractGenerator = "${glProjectPrefix}InternalIdentifierAbstractGenerator")
    #set ($glInternalIdentifierAssignedGenerator = "${glProjectPrefix}InternalIdentifierAssignedGenerator")
    #set ($glInternalIdentifierIdentityGenerator = "${glProjectPrefix}InternalIdentifierIdentityGenerator")
    #set ($glInternalIdentifierSequenceGenerator = "${glProjectPrefix}InternalIdentifierSequenceGenerator")
    #set ($glInternalProcedureMetaData = "${glProjectPrefix}InternalProcedureMetaData")
    #set ($glInternalProcedureMetaDataFactory = "${glProjectPrefix}InternalProcedureMetaDataFactory")
    #set ($glInternalProcedureParameterType = "${glProjectPrefix}InternalProcedureParameterType")
    #set ($glInternalRowCreator = "${glProjectPrefix}InternalRowCreator")
    #set ($glInternalRelationRowCreator = "${glProjectPrefix}InternalRelationRowCreator")
    #set ($glInternalStatementFactory = "${glProjectPrefix}InternalStatementFactory")

    ## [Allcommon-Util]
    #set ($glSimpleAssertUtil = "${glProjectPrefix}SimpleAssertUtil")
    #set ($glSimpleResourceUtil = "${glProjectPrefix}SimpleResourceUtil")
    #set ($glSimpleStringUtil = "${glProjectPrefix}SimpleStringUtil")
    #set ($glSimpleSystemUtil = "${glProjectPrefix}SimpleSystemUtil")
    #set ($glSimpleTypeUtil = "${glProjectPrefix}SimpleTypeUtil")
    #set ($glValueLabelUtil = "${glProjectPrefix}ValueLabelUtil")
    #set ($glTraceViewUtil = "${glProjectPrefix}TraceViewUtil")

    ## ===================================================================================
    ##                                                                            Variable
    ##                                                                            ========
    #set ($glConditionBeanInitialName = "CB")
    #set ($glConditionQueryInitialName = "CQ")
    #set ($glAttachedCBArgsVariableName = "cb")
    #set ($glParentVariablePrefix = "_parent")
    #set ($glChildrenVariablePrefix = "_children")

    ## ===================================================================================
    ##                                                                             Package
    ##                                                                             =======
    ## [Common]
    #set ($glPackageBaseCommon = "${database.baseCommonPackage}")
    #set ($glPackageBaseCommonAnnotation = "${database.baseCommonPackage}.annotation")
    #set ($glPackageBaseCommonBhv = "${database.baseCommonPackage}.bhv")
    #set ($glPackageBaseCommonBhvBatch = "${database.baseCommonPackage}.bhv.batch")
    #set ($glPackageBaseCommonBhvCore = "${database.baseCommonPackage}.bhv.core")
    #set ($glPackageBaseCommonBhvCoreCommand = "${database.baseCommonPackage}.bhv.core.command")
    #set ($glPackageBaseCommonBhvCoreExecution = "${database.baseCommonPackage}.bhv.core.execution")
    #set ($glPackageBaseCommonBhvLoad = "${database.baseCommonPackage}.bhv.load")
    #set ($glPackageBaseCommonBhvSetup = "${database.baseCommonPackage}.bhv.setup")
    #set ($glPackageBaseCommonCBean = "${database.baseCommonPackage}.cbean")
    #set ($glPackageBaseCommonCKey = "${database.baseCommonPackage}.cbean.ckey")
    #set ($glPackageBaseCommonCBeanMapping = "${database.baseCommonPackage}.cbean.mapping")
    #set ($glPackageBaseCommonCBeanGrouping = "${database.baseCommonPackage}.cbean.grouping")
    #set ($glPackageBaseCommonCBeanOutsidesql = "${database.baseCommonPackage}.cbean.outsidesql")
    #set ($glPackageBaseCommonCBeanOutsidesqlExecutor = "${database.baseCommonPackage}.cbean.outsidesql.executor")
    #set ($glPackageBaseCommonCBeanPagenavi = "${database.baseCommonPackage}.cbean.pagenavi")
    #set ($glPackageBaseCommonCBeanPagenaviGroup = "${database.baseCommonPackage}.cbean.pagenavi.group")
    #set ($glPackageBaseCommonCBeanPagenaviRange = "${database.baseCommonPackage}.cbean.pagenavi.range")
    #set ($glPackageBaseCommonSqlClause = "${database.baseCommonPackage}.cbean.sqlclause")
    #set ($glPackageBaseCommonCValue = "${database.baseCommonPackage}.cbean.cvalue")
    #set ($glPackageBaseCommonCOption = "${database.baseCommonPackage}.cbean.coption")
    #set ($glPackageBaseCommonCOptionParts = "${database.baseCommonPackage}.cbean.coption.parts")
    #set ($glPackageBaseCommonCOptionPartsLocal = "${database.baseCommonPackage}.cbean.coption.parts.local")
    #set ($glPackageBaseCommonDBMeta = "${database.baseCommonPackage}.dbmeta")
    #set ($glPackageBaseCommonDBMetaHierarchy = "${database.baseCommonPackage}.dbmeta.hierarchy")
    #set ($glPackageBaseCommonDBMetaHierarchyBasic = "${database.baseCommonPackage}.dbmeta.hierarchy.basic")
    #set ($glPackageBaseCommonDBMetaInfo = "${database.baseCommonPackage}.dbmeta.info")
    #set ($glPackageBaseCommonException = "${database.baseCommonPackage}.exception")
    #set ($glPackageBaseCommonHelper = "${database.baseCommonPackage}.helper")
    #set ($glPackageBaseCommonHelperCharacter = "${database.baseCommonPackage}.helper.character")
    #set ($glPackageBaseCommonHelperCharacterImpl = "${database.baseCommonPackage}.helper.character.impl")
    #set ($glPackageBaseCommonHelperCollectionOrder = "${database.baseCommonPackage}.helper.collection.order")
    #set ($glPackageBaseCommonHelperCollectionOrderImpl = "${database.baseCommonPackage}.helper.collection.order.impl")
    #set ($glPackageBaseCommonHelperStackTrace = "${database.baseCommonPackage}.helper.stacktrace")
    #set ($glPackageBaseCommonHelperStackTraceImpl = "${database.baseCommonPackage}.helper.stacktrace.impl")
    #set ($glPackageBaseCommonHelperToken = "${database.baseCommonPackage}.helper.token")
    #set ($glPackageBaseCommonHelperTokenLine = "${database.baseCommonPackage}.helper.token.line")
    #set ($glPackageBaseCommonHelperTokenLineImpl = "${database.baseCommonPackage}.helper.token.line.impl")
    #set ($glPackageBaseCommonHelperTokenFile = "${database.baseCommonPackage}.helper.token.file")
    #set ($glPackageBaseCommonHelperTokenFileImpl = "${database.baseCommonPackage}.helper.token.file.impl")

    #set ($glPackageBaseCommonJavaLike = "${database.baseCommonPackage}.javalike")
    #set ($glPackageBaseCommonJdbc = "${database.baseCommonPackage}.jdbc")
    #set ($glPackageBaseCommonJdbcHistory = "${database.baseCommonPackage}.jdbc.history")
    #set ($glPackageBaseCommonS2Container = "${database.baseCommonPackage}.s2container")
    #set ($glPackageBaseCommonS2Dao = "${database.baseCommonPackage}.s2dao")
    #set ($glPackageBaseCommonS2DaoInternal = "${database.baseCommonPackage}.s2dao.internal")
    #set ($glPackageBaseCommonS2DaoInternalValueType = "${database.baseCommonPackage}.s2dao.internal.valuetype")
    #set ($glPackageBaseCommonS2DaoInternalVarious = "${database.baseCommonPackage}.s2dao.internal.various")
    #set ($glPackageBaseCommonS2DaoInternalRsHandler = "${database.baseCommonPackage}.s2dao.internal.rshandler")
    #set ($glPackageBaseCommonS2DaoInternalSqlCommand = "${database.baseCommonPackage}.s2dao.internal.sqlcommand")
    #set ($glPackageBaseCommonS2DaoInternalSqlHandler = "${database.baseCommonPackage}.s2dao.internal.sqlhandler")
    #set ($glPackageBaseCommonS2DaoInternalSqlLog = "${database.baseCommonPackage}.s2dao.internal.sqllog")
    #set ($glPackageBaseCommonS2DaoInternalSqlParser = "${database.baseCommonPackage}.s2dao.internal.sqlparser")
    #set ($glPackageBaseCommonS2DaoInternalUtil = "${database.baseCommonPackage}.s2dao.internal.util")
    #set ($glPackageBaseCommonUtil = "${database.baseCommonPackage}.util")

    ## [Main]
    #set ($glPackageBaseBhv = "${database.baseBehaviorPackage}")
    #set ($glPackageBaseDao = "${database.baseDaoPackage}" )
    #set ($glPackageBaseCustomizeDao = "${database.baseDaoPackage}.customize" )
    #set ($glPackageBaseEntity = "${database.baseEntityPackage}")
    #set ($glPackageBaseCustomizeEntity = "${database.baseEntityPackage}.customize" )
    #set ($glPackageExtendedBhv = "${database.extendedBehaviorPackage}")
    #set ($glPackageExtendedDao = "${database.extendedDaoPackage}")
    #set ($glPackageExtendedCustomizeDao = "${database.extendedDaoPackage}.customize" )
    #set ($glPackageExtendedEntity = "${database.extendedEntityPackage}")
    #set ($glPackageExtendedCustomizeEntity = "${database.extendedEntityPackage}.customize" )
    #set ($glPackageBaseCB = "${database.conditionBeanPackage}.bs")
    #set ($glPackageCB = "${database.extendedConditionBeanPackage}")
    #set ($glPackageBaseCQ = "${database.conditionBeanPackage}.cq.bs")
    #set ($glPackageCQ = "${database.extendedConditionBeanPackage}.cq")
    #set ($glPackageCIQ = "${database.conditionBeanPackage}.cq.ciq")
    #set ($glPackageNss = "${database.conditionBeanPackage}.nss")
    #set ($glPackageBaseDBMeta = "${glPackageBaseEntity}.dbmeta")
    #set ($glPackageBaseCustomizeDBMeta = "${glPackageBaseCustomizeEntity}.dbmeta")
    #set ($glPackageBaseSqlParameterBean = "${database.SqlParameterBeanPackage}.bsparam")
    #set ($glPackageExtendedSqlParameterBean = "${database.SqlParameterBeanPackage}.exparam")
    #set ($glPackageArgumentBean = "${database.ArgumentBeanPackage}")

    ## *****************************************************************************************************************
    ##                                                                                                           Parsing
    ##                                                                                                           *******
    ## ===================================================================================
    ##                                                                           AllCommon
    ##                                                                           =========
    ## -----------------------------------------------------
    ##                                    allcommon behavior
    ##                                    ------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhv}))
    $database.makeDirectory($path)

    $database.info("public void parseAllcommonBehavior) {")
    $database.info("    parse('BehaviorReadable');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhv})}${glBehaviorReadable}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/bhv/BehaviorReadable.${glTemplateFileExtension}",$path ,"", "")
    $database.info("    parse('BehaviorWritable');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhv})}${glBehaviorWritable}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/bhv/BehaviorWritable.${glTemplateFileExtension}",$path ,"", "")
    $database.info("    parse('AbstractBehaviorReadable');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhv})}${glAbstractBehaviorReadable}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/bhv/AbstractBehaviorReadable.${glTemplateFileExtension}",$path ,"", "")
    $database.info("    parse('AbstractBehaviorWritable');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhv})}${glAbstractBehaviorWritable}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/bhv/AbstractBehaviorWritable.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvBatch}))
      $database.makeDirectory($path)

      $database.info("    parseTokenFileReflectionOption()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileReflectionOption}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/batch/TokenFileReflectionOption.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseTokenFileReflectionResult()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileReflectionResult}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/batch/TokenFileReflectionResult.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseTokenFileReflectionFailure()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileReflectionFailure}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/batch/TokenFileReflectionFailure.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseTokenFileOutputOption()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileOutputOption}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/batch/TokenFileOutputOption.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseTokenFileOutputResult()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileOutputResult}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/batch/TokenFileOutputResult.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvCore}))
      $database.makeDirectory($path)

      $database.info("    parse('BehaviorCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCore})}${glBehaviorCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/BehaviorCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('BehaviorCommandComponentSetup');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCore})}${glBehaviorCommandComponentSetup}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/BehaviorCommandComponentSetup.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('BehaviorCommandInvoker');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCore})}${glBehaviorCommandInvoker}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/BehaviorCommandInvoker.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('BehaviorInitializer');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCore})}${glBehaviorInitializer}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/BehaviorInitializer.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InvokerAssistant');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCore})}${glInvokerAssistant}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/InvokerAssistant.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('ResourceContext');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCore})}${glResourceContext}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/ResourceContext.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('ResourceParameter');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCore})}${glResourceParameter}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/ResourceParameter.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('SqlExecution');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCore})}${glSqlExecution}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/SqlExecution.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('SqlExecutionCreator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCore})}${glSqlExecutionCreator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/SqlExecutionCreator.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand}))
      $database.makeDirectory($path)

      $database.info("    parse('AbstractBehaviorCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glAbstractBehaviorCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/AbstractBehaviorCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('AbstractEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glAbstractEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/AbstractEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('AbstractListEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glAbstractListEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/AbstractListEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('AbstractOutsideSqlCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glAbstractOutsideSqlCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/AbstractOutsideSqlCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('AbstractOutsideSqlSelectCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glAbstractOutsideSqlSelectCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/AbstractOutsideSqlSelectCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('AbstractSelectCBCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glAbstractSelectCBCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/AbstractSelectCBCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('BatchDeleteEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glBatchDeleteEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/BatchDeleteEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('BatchDeleteNonstrictEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glBatchDeleteNonstrictEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/BatchDeleteNonstrictEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('BatchInsertEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glBatchInsertEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/BatchInsertEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('BatchUpdateEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glBatchUpdateEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/BatchUpdateEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('BatchUpdateNonstrictEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glBatchUpdateNonstrictEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/BatchUpdateNonstrictEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('DeleteEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glDeleteEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/DeleteEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('DeleteNonstrictEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glDeleteNonstrictEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/DeleteNonstrictEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InsertEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glInsertEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/InsertEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('OutsideSqlSelectListCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glOutsideSqlSelectListCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/OutsideSqlSelectListCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('OutsideSqlCallCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glOutsideSqlCallCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/OutsideSqlCallCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('OutsideSqlExecuteCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glOutsideSqlExecuteCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/OutsideSqlExecuteCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('OutsideSqlSelectCursorCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glOutsideSqlSelectCursorCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/OutsideSqlSelectCursorCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('QueryDeleteCBCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glQueryDeleteCBCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/QueryDeleteCBCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('QueryUpdateEntityCBCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glQueryUpdateEntityCBCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/QueryUpdateEntityCBCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('SelectCountCBCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glSelectCountCBCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/SelectCountCBCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('SelectListCBCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glSelectListCBCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/SelectListCBCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('SelectNextValCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glSelectNextValCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/SelectNextValCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('SelectScalarCBCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glSelectScalarCBCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/SelectScalarCBCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('UpdateEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glUpdateEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/UpdateEntityCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('UpdateNonstrictEntityCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreCommand})}${glUpdateNonstrictEntityCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/command/UpdateNonstrictEntityCommand.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvCoreExecution}))
      $database.makeDirectory($path)

      $database.info("    parse('BasicSelectExecution');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreExecution})}${glBasicSelectExecution}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/execution/BasicSelectExecution.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('OutsideSqlSelectExecution');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreExecution})}${glOutsideSqlSelectExecution}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/execution/OutsideSqlSelectExecution.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('SelectCBExecution');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvCoreExecution})}${glSelectCBExecution}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/core/execution/SelectCBExecution.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvLoad}))
      $database.makeDirectory($path)

      $database.info("    parse('LoadReferrerOption')")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvLoad})}${glLoadReferrerOption}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/load/LoadReferrerOption.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvSetup}))
      $database.makeDirectory($path)

      $database.info("    parseConditionBeanSetupper()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glConditionBeanSetupper}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/setup/ConditionBeanSetupper.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseEntityListSetupper()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glEntityListSetupper}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/setup/EntityListSetupper.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseValueLabelSetupper()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glValueLabelSetupper}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/setup/ValueLabelSetupper.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseValueLabelBox()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glValueLabelBox}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/setup/ValueLabelBox.${glTemplateFileExtension}",$path ,"", "")
    $database.info("}")

    ## -----------------------------------------------------
    ##                                     allcommon Context
    ##                                     -----------------
    $database.info("public void parseContext() {")
    $database.info("    parse('AccessContext')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glAccessContext}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/AccessContext.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('CallbackContext')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCallbackContext}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/CallbackContext.${glTemplateFileExtension}",$path ,"", "")

    $database.info("parse('InternalMapContext');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glInternalMapContext}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/InternalMapContext.${glTemplateFileExtension}",$path ,"" ,"")
    $database.info("}")

    ## -----------------------------------------------------
    ##                                      allcommon Entity
    ##                                      ----------------
    $database.info("public void parse('Entity') {")
    $database.info("    parseEntity();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glEntity}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/Entity.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('EntityDefinedCommonColumn');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glEntityDefinedCommonColumn}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/EntityDefinedCommonColumn.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('CommonColumnAutoSetupper');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCommonColumnAutoSetupper}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/CommonColumnAutoSetupper.${glTemplateFileExtension}",$path ,"", "")
    $database.info("}")

    ## -----------------------------------------------------
    ##                               allcommon ConditionBean
    ##                               -----------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBean}))
    $database.makeDirectory($path)

    $database.info("public void parseConditionBeanFramework() {")
    $database.info("    parseFetchNarrowingBeanContext()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glFetchNarrowingBeanContext}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/FetchNarrowingBeanContext.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseFetchNarrowingBean()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glFetchNarrowingBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/FetchNarrowingBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseSimplePagingBean()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glSimplePagingBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/SimplePagingBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PagingHandler')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glPagingHandler}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/PagingHandler.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PagingInvoker')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glPagingInvoker}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/PagingInvoker.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PagingResultBean');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glPagingResultBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/PagingResultBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('ListResultBean');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glListResultBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ListResultBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('ResultBeanBuilder');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glResultBeanBuilder}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ResultBeanBuilder.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionBeanContext()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionBeanContext}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ConditionBeanContext.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionBean()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ConditionBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionQuery()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionQuery}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ConditionQuery.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('MapParameterBean');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glMapParameterBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/MapParameterBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parsePagingBean()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glPagingBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/PagingBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseOrderByBean()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glOrderByBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/OrderByBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseSelectResource()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glSelectResource}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/SelectResource.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('ScalarQuery')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glScalarQuery}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ScalarQuery.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('SubQuery')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glSubQuery}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/SubQuery.${glTemplateFileExtension}",$path ,"", "")

	$database.info("    parse('UnionQuery')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glUnionQuery}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/UnionQuery.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBean}))
    $database.makeDirectory($path)

    $database.info("    parseAbstractConditionBean")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glAbstractConditionBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/AbstractConditionBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseAbstractConditionQuery")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glAbstractConditionQuery}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/AbstractConditionQuery.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------
    ##                allcommon condition-bean condition-key
    ##                --------------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCKey}))
    $database.makeDirectory($path)

    $database.info("    parseConditionKey")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_equal")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}Equal.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_equal.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_notEqual")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}NotEqual.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_notEqual.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_greaterThan")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}GreaterThan.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_greaterThan.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_lessThan")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}LessThan.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_lessThan.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_greaterEqual")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}GreaterEqual.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_greaterEqual.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_lessEqual")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}LessEqual.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_lessEqual.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_prefixSearch")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}PrefixSearch.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_prefixSearch.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_likeSearch")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}LikeSearch.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_likeSearch.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_likeSearch")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}NotLikeSearch.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_notLikeSearch.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_inScope")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}InScope.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_inScope.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_notInScope")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}NotInScope.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_notInScope.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_isNull")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}IsNull.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_isNull.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_isNotNull")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKey}IsNotNull.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_isNotNull.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------
    ##             allcommon condition-bean condition-option
    ##             -----------------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCOption}))
    $database.makeDirectory($path)

    $database.info("    parseConditionOption")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOption}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/ConditionOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('SimpleStringOption')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glSimpleStringOption}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/SimpleStringOption.${glTemplateFileExtension}",$path ,"", "")
	
    $database.info("    parse('FromToOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glFromToOption}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/FromToOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('DateFromToOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glDateFromToOption}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/DateFromToOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseLikeSearchOption")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glLikeSearchOption}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/LikeSearchOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseInScopeOption")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glInScopeOption}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/InScopeOption.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCOptionParts}))
    $database.makeDirectory($path)

    $database.info("    parseSplitOptionParts")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOptionParts})}${glSplitOptionParts}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/parts/SplitOptionParts.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseToUpperLowerCaseOptionParts")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOptionParts})}${glToUpperLowerCaseOptionParts}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/parts/ToUpperLowerCaseOptionParts.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseToSingleByteOptionParts")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOptionParts})}${glToSingleByteOptionParts}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/parts/ToSingleByteOptionParts.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCOptionPartsLocal}))
    $database.makeDirectory($path)

    $database.info("    parseJapaneseOptionPartsAgent")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOptionPartsLocal})}${glJapaneseOptionPartsAgent}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/parts/local/JapaneseOptionPartsAgent.${glTemplateFileExtension}",$path ,"", "")

    ## -------------------------------------------------------
    ##                allcommon condition-bean condition-value
    ##                ----------------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCValue}))
    $database.makeDirectory($path)

    $database.info("    parseConditionValue")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCValue})}${glConditionValue}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/cvalue/ConditionValue.${glTemplateFileExtension}",$path ,"", "")

    ## -------------------------------------------------------
    ##                       allcommon condition-bean grouping
    ##                       ---------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanGrouping}))
    $database.makeDirectory($path)

    $database.info("    parse('GroupingOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingOption}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/grouping/GroupingOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('GroupingRowEndDeterminer');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingRowEndDeterminer}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/grouping/GroupingRowEndDeterminer.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('GroupingRowResource');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingRowResource}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/grouping/GroupingRowResource.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('GroupingRowSetupper');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingRowSetupper}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/grouping/GroupingRowSetupper.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanMapping}))
    $database.makeDirectory($path)

    $database.info("    parse('EntityDtoMapper');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanMapping})}${glEntityDtoMapper}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/mapping/EntityDtoMapper.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------
    ##                  allcommon condition-bean outside-sql
    ##                  ------------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql}))
    $database.makeDirectory($path)

    $database.info("    parse('OutsideSqlContext');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql})}${glOutsideSqlContext}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/OutsideSqlContext.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('OutsideSqlOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql})}${glOutsideSqlOption}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/OutsideSqlOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('ProcedurePmb');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql})}${glProcedurePmb}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/ProcedurePmb.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesqlExecutor}))
    $database.makeDirectory($path)

    $database.info("    parse('OutsideSqlBasicExecutor');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesqlExecutor})}${glOutsideSqlBasicExecutor}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/executor/OutsideSqlBasicExecutor.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('OutsideSqlCursorExecutor');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesqlExecutor})}${glOutsideSqlCursorExecutor}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/executor/OutsideSqlCursorExecutor.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('OutsideSqlPagingExecutor');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesqlExecutor})}${glOutsideSqlPagingExecutor}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/executor/OutsideSqlPagingExecutor.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('OutsideSqlEntityExecutor');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesqlExecutor})}${glOutsideSqlEntityExecutor}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/executor/OutsideSqlEntityExecutor.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------
    ##                    allcommon condition-bean page-navi
    ##                    ----------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanPagenavi}))
    $database.makeDirectory($path)

    $database.info("    parse('PageNumberLink');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenavi})}${glPageNumberLink}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/PageNumberLink.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PageNumberLinkSetupper');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenavi})}${glPageNumberLinkSetupper}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/PageNumberLinkSetupper.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviGroup}))
    $database.makeDirectory($path)

    $database.info("    parse('PageGroupBean');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviGroup})}${glPageGroupBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/group/PageGroupBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PageGroupOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviGroup})}${glPageGroupOption}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/group/PageGroupOption.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviRange}))
    $database.makeDirectory($path)

    $database.info("    parse('PageRangeBean');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviRange})}${glPageRangeBean}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/range/PageRangeBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PageRangeOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviRange})}${glPageRangeOption}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/range/PageRangeOption.${glTemplateFileExtension}",$path ,"", "")

    ## -------------------------------------------------------
    ##                     allcommon condition-bean sql-clause
    ##                     -----------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonSqlClause}))
    $database.makeDirectory($path)

    $database.info("    parseSqlClause")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("    parseAbstractSqlClause")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glAbstractSqlClause}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/AbstractSqlClause.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("parse('SqlClauseCreator');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseCreator}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClauseCreator.${glTemplateFileExtension}",$path ,"" ,"")

    #if ($database.isTargetLanguageJava())
      $database.info("    parse('WhereClauseSimpleFilter');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glWhereClauseSimpleFilter}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/WhereClauseSimpleFilter.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_derby")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}Derby.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_derby.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_h2")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}H2.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_h2.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_oracle")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}Oracle.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_oracle.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_firebird")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}Firebird.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_firebird.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_mysql")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}MySql.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_mysql.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_postgresql")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}PostgreSql.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_postgresql.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_mssql")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}SqlServer.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_mssql.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_db2")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}Db2.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_db2.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_interbase")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}Interbase.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_interbase.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_default")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClause}Default.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_default.${glTemplateFileExtension}",$path ,"" ,"")
    #end

    $database.info("    parseOrderByClause")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glOrderByClause}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/OrderByClause.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("    parseOrderByElement")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glOrderByElement}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/OrderByElement.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("}")

    ## -------------------------------------------------------
    ##                                  allcommon DBFlute Core
    ##                                  ----------------------
    $database.info("public void parseDBFluteCore() {")
    $database.info("parse('DBFluteConfig');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDBFluteConfig}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DBFluteConfig.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("    parse('DBFluteInitializer');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDBFluteInitializer}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DBFluteInitializer.${glTemplateFileExtension}",$path,"", "")
    $database.info("}")

    ## -------------------------------------------------------
    ##                                        allcommon DBMeta
    ##                                        ----------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMeta}))
    $database.makeDirectory($path)

    $database.info("public void parseDBMetaClass() {")
    $database.info("    parse('DBMeta');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMeta})}${glDBMeta}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/DBMeta.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('AbstractDBMeta');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMeta})}${glAbstractDBMeta}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/AbstractDBMeta.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('DBMetaProvider');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMeta})}${glDBMetaProvider}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/DBMetaProvider.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy}))
      $database.makeDirectory($path)

      $database.info("    parse('HierarchyArranger');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchyArranger}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchyArranger.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchyBasicRequest');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchyBasicRequest}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchyBasicRequest.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchyRequest');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchyRequest}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchyRequest.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchyRequestElement');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchyRequestElement}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchyRequestElement.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceColumn');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchySourceColumn}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchySourceColumn.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceIterator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchySourceIterator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchySourceIterator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceRow');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchySourceRow}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchySourceRow.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic}))
      $database.makeDirectory($path)

      $database.info("    parse('HierarchySourceEntityColumn');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic})}${glHierarchySourceEntityColumn}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/basic/HierarchySourceEntityColumn.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceEntityListIterator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic})}${glHierarchySourceEntityListIterator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/basic/HierarchySourceEntityListIterator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceEntityRow');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic})}${glHierarchySourceEntityRow}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/basic/HierarchySourceEntityRow.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceListIterator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic})}${glHierarchySourceListIterator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/basic/HierarchySourceListIterator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceRowSetupper');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic})}${glHierarchySourceRowSetupper}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/basic/HierarchySourceRowSetupper.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo}))
      $database.makeDirectory($path)

      $database.info("    parse('ForeignInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glForeignInfo}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/ForeignInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('ReferrerInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glReferrerInfo}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/ReferrerInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('RelationInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glRelationInfo}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/RelationInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('UniqueInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glUniqueInfo}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/UniqueInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('ColumnInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glColumnInfo}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/ColumnInfo.${glTemplateFileExtension}",$path,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMeta}))
    $database.makeDirectory($path)

    $database.info("    parse('DBMetaInstanceHandler');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMeta})}${glDBMetaInstanceHandler}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/DBMetaInstanceHandler.${glTemplateFileExtension}",$path,"", "")

    $database.info("}")

    ## -------------------------------------------------------
    ##                                     allcommon exception
    ##                                     -------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonException}))
    $database.makeDirectory($path)

    $database.info("public void parseExceptionClass() {")

    $database.info("    parse('BatchEntityAlreadyUpdatedException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glBatchEntityAlreadyUpdatedException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/BatchEntityAlreadyUpdatedException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('BindVariableCommentNotFoundPropertyException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glBindVariableCommentNotFoundPropertyException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/BindVariableCommentNotFoundPropertyException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('BindVariableParameterNullValueException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glBindVariableParameterNullValueException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/BindVariableParameterNullValueException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EmbeddedValueCommentNotFoundPropertyException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEmbeddedValueCommentNotFoundPropertyException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EmbeddedValueCommentNotFoundPropertyException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EmbeddedValueParameterNullValueException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEmbeddedValueParameterNullValueException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EmbeddedValueParameterNullValueException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EndCommentNotFoundException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEndCommentNotFoundException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EndCommentNotFoundException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('IfCommentConditionNotFoundException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glIfCommentConditionNotFoundException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/IfCommentConditionNotFoundException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('IfCommentNotBooleanResultException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glIfCommentNotBooleanResultException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/IfCommentNotBooleanResultException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('IfCommentWrongExpressionException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glIfCommentWrongExpressionException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/IfCommentWrongExpressionException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('DangerousResultSizeException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glDangerousResultSizeException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/DangerousResultSizeException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('DBMetaNotFoundException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glDBMetaNotFoundException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/DBMetaNotFoundException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EntityAlreadyUpdatedException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEntityAlreadyUpdatedException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EntityAlreadyUpdatedException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EntityAlreadyDeletedException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEntityAlreadyDeletedException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EntityAlreadyDeletedException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EntityAlreadyExistsException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEntityAlreadyExistsException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EntityAlreadyExistsException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EntityDuplicatedException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEntityDuplicatedException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EntityDuplicatedException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('OutsideSqlNotFoundException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glOutsideSqlNotFoundException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/OutsideSqlNotFoundException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('RequiredOptionNotFoundException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glRequiredOptionNotFoundException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/RequiredOptionNotFoundException.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseRecordHasAlreadyBeenDeletedException();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glRecordHasAlreadyBeenDeletedException}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/exception/RecordHasAlreadyBeenDeletedException.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseRecordHasOverlappedException();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glRecordHasOverlappedException}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/exception/RecordHasOverlappedException.${glTemplateFileExtension}",$path,"", "")

    ## DBFlute-0.7.7
    $database.info("    parse('SQLFailureException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glSQLFailureException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/SQLFailureException.${glTemplateFileExtension}",$path,"", "")
    $database.info("}")

    ## -------------------------------------------------------
    ##                                        allcommon helper
    ##                                        ----------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelper}))
    $database.makeDirectory($path)

    $database.info("public void parseHelperClass() {")

    $database.info("    parseMapListString();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapListString}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/helper/MapListString.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parseMapListStringImpl();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapListStringImpl}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/helper/MapListStringImpl.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('MapStringBuilder');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapStringBuilder}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/helper/MapStringBuilder.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('MapStringBuilderImpl');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapStringBuilderImpl}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/helper/MapStringBuilderImpl.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('StringKeyMap');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelper})}${glStringKeyMap}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/StringKeyMap.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('StringSet');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelper})}${glStringSet}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/StringSet.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperCharacter}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperCharacterImpl}))
      $database.makeDirectory($path)

      $database.info("    parseGeneralCharacter();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCharacter})}${glGeneralCharacter}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/character/GeneralCharacter.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseGeneralCharacterImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCharacterImpl})}${glGeneralCharacterImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/character/impl/GeneralCharacterImpl.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseJapaneseCharacter();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCharacter})}${glJapaneseCharacter}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/character/JapaneseCharacter.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseJapaneseCharacterImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCharacterImpl})}${glJapaneseCharacterImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/character/impl/JapaneseCharacterImpl.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrder}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrderImpl}))
      $database.makeDirectory($path)

      $database.info("    parseAccordingToOrder();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrder})}${glAccordingToOrder}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/collection/order/AccordingToOrder.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseAccordingToOrderOption();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrder})}${glAccordingToOrderOption}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/collection/order/AccordingToOrderOption.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseAccordingToOrderIdExtractor();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrder})}${glAccordingToOrderIdExtractor}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/collection/order/AccordingToOrderIdExtractor.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseAccordingToOrderImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrderImpl})}${glAccordingToOrderImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/collection/order/impl/AccordingToOrderImpl.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperStackTrace}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperStackTraceImpl}))
      $database.makeDirectory($path)

      $database.info("    parse('InvokeNameExtractingResource');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperStackTrace})}${glInvokeNameExtractingResource}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/stacktrace/InvokeNameExtractingResource.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InvokeNameExtractor');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperStackTrace})}${glInvokeNameExtractor}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/stacktrace/InvokeNameExtractor.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InvokeNameResult');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperStackTrace})}${glInvokeNameResult}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/stacktrace/InvokeNameResult.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InvokeNameExtractorImpl');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperStackTraceImpl})}${glInvokeNameExtractorImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/stacktrace/impl/InvokeNameExtractorImpl.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperToken}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperTokenLine}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperTokenLineImpl}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperTokenFileImpl}))
      $database.makeDirectory($path)

      $database.info("    parseLineToken();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenLine})}${glLineToken}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/line/LineToken.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseLineTokenImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenLineImpl})}${glLineTokenImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/line/impl/LineTokenImpl.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseLineTokenizingOption();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenLine})}${glLineTokenizingOption}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/line/LineTokenizingOption.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseLineMakingOption();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenLine})}${glLineMakingOption}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/line/LineMakingOption.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileToken();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileToken}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileToken.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileTokenImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFileImpl})}${glFileTokenImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/impl/FileTokenImpl.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileTokenizingOption();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingOption}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileTokenizingOption.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileTokenizingRowResource();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingRowResource}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileTokenizingRowResource.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileTokenizingCallback();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingCallback}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileTokenizingCallback.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileTokenizingHeaderInfo();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingHeaderInfo}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileTokenizingHeaderInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingOption();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingOption}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileMakingOption.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingRowResource();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingRowResource}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileMakingRowResource.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingCallback();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingCallback}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileMakingCallback.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingHeaderInfo();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingHeaderInfo}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileMakingHeaderInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingSimpleFacade();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingSimpleFacade}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileMakingSimpleFacade.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingSimpleFacadeImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFileImpl})}${glFileMakingSimpleFacadeImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/impl/FileMakingSimpleFacadeImpl.${glTemplateFileExtension}",$path,"", "")

    $database.info("}")

    ## -------------------------------------------------------
    ##                                allcommon Classification
    ##                                ------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    #if ($database.hasClassificationDefinitionMap())
      $database.info("parseAllcommonClassification() {")

      $database.info("    parse('CDef');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCDef}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/CDef.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("}")
    #end

    ## -------------------------------------------------------
    ##                                         allcommon DBDef
    ##                                         ---------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.info("    parse('DBCurrent');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDBCurrent}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DBCurrent.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("    parse('DBDef');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDBDef}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DBDef.${glTemplateFileExtension}",$path ,"" ,"")

    ## -------------------------------------------------------
    ##                                   allcommon Implemented
    ##                                   ---------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.info("    parse('ImplementedCommonColumnAutoSetupper');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glImplementedCommonColumnAutoSetupper}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/ImplementedCommonColumnAutoSetupper.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('ImplementedInvokerAssistant');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glImplementedInvokerAssistant}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/ImplementedInvokerAssistant.${glTemplateFileExtension}",$path,"", "")

    $database.info("parse('ImplementedSqlClauseCreator');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glImplementedSqlClauseCreator}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/ImplementedSqlClauseCreator.${glTemplateFileExtension}",$path ,"" ,"")

    ## -------------------------------------------------------
    ##                                       allcommon BuriDef
    ##                                       -----------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    #if ($database.isUseBuri())
      $database.info("    parse('BuriDef');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glBuriDef}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/BuriDef.${glTemplateFileExtension}",$path ,"" ,"")
    #end

    ## -------------------------------------------------------
    ##                                   allcommon S2Container
    ##                                   ---------------------
      $database.info("parseAllcommonS2Container() {")
      #if ($database.isTargetContainerSeasar())
        #if ($database.isAvailableHotDeploy())
          #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2Container}))
          $database.makeDirectory($path)

          $database.info("    parse('BehaviorCreator');")
          #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Container})}${glBehaviorCreator}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/allcommon/s2container/BehaviorCreator.${glTemplateFileExtension}",$path ,"" ,"")

          #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
            #set ($path = "${dbfluteDiconPackageName}" )
            $database.makeDirectory($path)

            #set ($path = "${dbfluteDiconPackageName}/${glDBFluteDiconFileName}" )
            $database.info("    ${path}")
            $generator.parse("om/${glResourceDirectory}/allcommon/s2container/DBFluteHotDeployDicon.${glTemplateFileExtension}", $path, "", "")

            #set ($path = "${dbfluteDiconPackageName}/${glCreatorDiconFileName}" )
            $database.info("    ${path}")
            $generator.parse("om/${glResourceDirectory}/allcommon/s2container/DBFluteCreatorDicon.${glTemplateFileExtension}", $path, "", "")

            #set ($path = "${dbfluteDiconPackageName}/${glCustomizerDiconFileName}" )
            $database.info("    ${path}")
            $generator.parse("om/${glResourceDirectory}/allcommon/s2container/DBFluteCustomizerDicon.${glTemplateFileExtension}", $path, "", "")
          #end
        #else
          #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
            #set ($path = "${dbfluteDiconPackageName}" )
            $database.makeDirectory($path)

            #set ($path = "${dbfluteDiconPackageName}/${glDBFluteDiconFileName}" )
            $database.info("    ${path}")
            $generator.parse("om/${glResourceDirectory}/allcommon/s2container/DBFluteNormalDicon.${glTemplateFileExtension}", $path, "", "")
          #end
        #end
      #end
      #if ($database.isTargetContainerSpring())
        #foreach ($dbfluteBeansPackageName in $database.DBFluteBeansPackageNameList)
          #set ($path = "${dbfluteBeansPackageName}" )
          $database.makeDirectory($path)

          #set ($path = "${dbfluteBeansPackageName}/${glDBFluteBeansFileName}" )
          $database.info("    ${path}")
          $generator.parse("om/${glResourceDirectory}/allcommon/s2container/DBFluteBeans.${glTemplateFileExtension}", $path, "", "")
        #end
      #end
      $database.info("}")

    ## -------------------------------------------------------
    ##                                      allcommon selector
    ##                                      ------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.info("public void parseSelector() {")
    #if ($database.isTargetLanguageJava())
      $database.info("    parse('CacheAbstractSelector');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCacheAbstractSelector}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/CacheAbstractSelector.${glTemplateFileExtension}",$path ,"", "")
    #end
    $database.info("    parse('BehaviorSelector');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glBehaviorSelector}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/BehaviorSelector.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.info("    parse('CacheBehaviorSelector');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCacheBehaviorSelector}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/CacheBehaviorSelector.${glTemplateFileExtension}",$path ,"", "")

    $database.info("}")

    ## -------------------------------------------------------
    ##                                       allcommon Logging
    ##                                       -----------------
    $database.info("parse('QLog');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glQLog}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/QLog.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("parse('XLog');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glXLog}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/XLog.${glTemplateFileExtension}",$path ,"" ,"")

    ## -------------------------------------------------------
    ##                                          allcommon JDBC
    ##                                          --------------
    $database.info("public void parseJdbcClass() {")
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonJdbc}))
    $database.makeDirectory($path)

    $database.info("    parse('CursorHandler');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJdbc})}${glCursorHandler}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/jdbc/CursorHandler.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('LatestSqlProvider');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJdbc})}${glLatestSqlProvider}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/jdbc/LatestSqlProvider.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('SqlLogHandler');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJdbc})}${glSqlLogHandler}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/jdbc/SqlLogHandler.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('StatementConfig');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJdbc})}${glStatementConfig}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/jdbc/StatementConfig.${glTemplateFileExtension}",$path,"", "")
    $database.info("}")

    ## -------------------------------------------------------
    ##                                         allcommon S2Dao
    ##                                         ---------------
    $database.info("public void parseS2DaoClass() {")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2Dao}))
    $database.makeDirectory($path)

    #if ($database.isTargetLanguageJava())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glBeanMetaDataFactoryExtension}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/BeanMetaDataFactoryExtension.${glTemplateFileExtension}",$path,"", "")

      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glPropertyTypeFactoryBuilderExtension}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/PropertyTypeFactoryBuilderExtension.${glTemplateFileExtension}",$path,"", "")
    #end

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glSqlLogRegistryLatestSqlProvider}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/SqlLogRegistryLatestSqlProvider.${glTemplateFileExtension}",$path,"", "")

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glFetchNarrowingResultSetWrapper}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/FetchNarrowingResultSetWrapper.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava())
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalAbstractDtoMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalAbstractDtoMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalAbstractDtoMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractBeanMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalAbstractBeanMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalAbstractBeanMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBeanArrayMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalBeanArrayMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalBeanArrayMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBeanListMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalBeanListMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalBeanListMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalAbstractAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractBatchAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractBatchAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractBatchAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractSqlCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractSqlCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractSqlCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalDeleteAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalDeleteAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteBatchAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalDeleteBatchAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalDeleteBatchAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteQueryAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalDeleteQueryAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalDeleteQueryAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalInsertAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalInsertAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalInsertAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalInsertBatchAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalInsertBatchAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalInsertBatchAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalProcedureCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalProcedureCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateBatchAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateBatchAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateBatchAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateModifiedOnlyCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateModifiedOnlyCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateModifiedOnlyCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateQueryAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateQueryAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateQueryAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalAbstractAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalAbstractAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalAbstractAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractBatchAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalAbstractBatchAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalAbstractBatchAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBasicHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalBasicHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalBasicHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBasicSelectHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalBasicSelectHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalBasicSelectHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBasicUpdateHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalBasicUpdateHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalBasicUpdateHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalCommandContextHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalCommandContextHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalCommandContextHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalDeleteAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalDeleteAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteBatchAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalDeleteBatchAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalDeleteBatchAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalInsertAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalInsertAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalInsertAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalInsertBatchAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalInsertBatchAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalInsertBatchAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalProcedureHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalProcedureHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalUpdateAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalUpdateAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateBatchAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalUpdateBatchAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalUpdateBatchAutoHandler.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlLog}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalSqlLog');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlLog})}${glInternalSqlLog}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqllog/InternalSqlLog.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalSqlLogRegistry');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlLog})}${glInternalSqlLogRegistry}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqllog/InternalSqlLogRegistry.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalSqlParser');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser})}${glInternalSqlParser}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlparser/InternalSqlParser.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalSqlTokenizer');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser})}${glInternalSqlTokenizer}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlparser/InternalSqlTokenizer.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalCommandContextCreator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser})}${glInternalCommandContextCreator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlparser/InternalCommandContextCreator.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalUtil}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalBindVariableUtil');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalUtil})}${glInternalBindVariableUtil}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/util/InternalBindVariableUtil.${glTemplateFileExtension}",$path,"", "")
      
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalValueType}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalBytesOidType');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalValueType})}${glInternalBytesOidType}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/valuetype/InternalBytesOidType.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalIdentifierGeneratorFactory');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalIdentifierGeneratorFactory}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalIdentifierGeneratorFactory.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalIdentifierAbstractGenerator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalIdentifierAbstractGenerator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalIdentifierAbstractGenerator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalIdentifierAssignedGenerator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalIdentifierAssignedGenerator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalIdentifierAssignedGenerator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalIdentifierIdentityGenerator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalIdentifierIdentityGenerator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalIdentifierIdentityGenerator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalIdentifierSequenceGenerator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalIdentifierSequenceGenerator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalIdentifierSequenceGenerator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureMetaData');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalProcedureMetaData}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalProcedureMetaData.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureMetaDataFactory');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalProcedureMetaDataFactory}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalProcedureMetaDataFactory.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureParameterType');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalProcedureParameterType}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalProcedureParameterType.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalRowCreator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalRowCreator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalRowCreator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalRelationRowCreator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalRelationRowCreator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalRelationRowCreator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalStatementFactory');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalStatementFactory}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalStatementFactory.${glTemplateFileExtension}",$path,"", "")
    #end
    $database.info("}")

    ## -------------------------------------------------------
    ##                                          allcommon Util
    ##                                          --------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonUtil}))
    $database.makeDirectory($path)

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glSimpleAssertUtil}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/util/SimpleAssertUtil.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glSimpleResourceUtil}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/util/SimpleResourceUtil.${glTemplateFileExtension}",$path,"", "")
    #end

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glSimpleStringUtil}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/util/SimpleStringUtil.${glTemplateFileExtension}",$path,"", "")

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glSimpleSystemUtil}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/util/SimpleSystemUtil.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glSimpleTypeUtil}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/util/SimpleTypeUtil.${glTemplateFileExtension}",$path,"", "")
    #end

    #if ($database.isTargetLanguageJava())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glValueLabelUtil}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/util/ValueLabelUtil.${glTemplateFileExtension}",$path,"", "")
    #end

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glTraceViewUtil}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/util/TraceViewUtil.${glTemplateFileExtension}",$path,"", "")

    ## ===================================================================================
    ##                                                                        Table Object
    ##                                                                        ============
    ## for Sql2Entity
    #set ($isSql2Entity = false)

    #set ($path = $database.getPackageAsPath(${glPackageBaseBhv}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseEntity}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseDBMeta}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseCB}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseCQ}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageCIQ}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageCQ}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageNss}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageCB}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageExtendedBhv}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageExtendedEntity}))
    $database.makeDirectory($path)

    ##
    ## Delete old table classes.
    ##
    $database.deleteOldTableClass()

    ##
    ## Loop by tables.
    ##
    $database.info("/* * * * * * * * * * * * * * {Table Class}")
    #foreach ($table in $database.tables)
      #if (!$table.isForReferenceOnly())

        $database.info("parseTable('${table.Name}');")
        ##
        ## The name of objects
        ##
        #set ($myExtendedDaoClassName = "${table.extendedDaoClassName}")
        #set ($myExtendedDaoPackageName = "${glPackageExtendedDao}")

        #set ($myBaseDaoClassName = "${table.baseDaoClassName}")
        #set ($myBaseDaoPackageName = "${glPackageBaseDao}")

        #set ($myBaseBhvClassName = "${table.baseBehaviorClassName}")
        #set ($myBaseBhvPackageName = "${glPackageBaseBhv}")
        #set ($myExtendedBhvClassName = "${table.extendedBehaviorClassName}")
        #set ($myExtendedBhvPackageName = "${glPackageExtendedBhv}")

        #set ($myBaseObjectClassName = "${table.baseEntityClassName}")
        #set ($myBaseEntityPackageName = "${glPackageBaseEntity}")

        #set ($myExtendedObjectClassName = "${table.extendedEntityClassName}")
        #set ($myExtendedEntityPackageName = "${glPackageExtendedEntity}")

        #set ($myBaseConditionBeanClassName = "${table.baseConditionBeanClassName}")
        #set ($myConditionBeanClassName = "${table.extendedConditionBeanClassName}")
        #set ($myAbstractBaseConditionQueryClassName = "${table.abstractBaseConditionQueryClassName}")
        #set ($myBaseConditionQueryClassName = "${table.baseConditionQueryClassName}")
        #set ($myConditionQueryClassName = "${table.extendedConditionQueryClassName}")
        #set ($myConditionInlineQueryClassName = "${table.extendedConditionInlineQueryClassName}")
        #set ($myNestSelectSetupperClassName = "${table.nestSelectSetupperClassName}")
        #set ($myNestSelectSetupperTerminalClassName = "${table.nestSelectSetupperTerminalClassName}")

        #set ($myDBMetaClassName = "${table.DBMetaClassName}")
        #set ($myDBMetaPackageName = "${glPackageBaseDBMeta}")

        ##
        ## The variable name
        ##
        #set ($myAttachedCBArgsString = "${glPackageCB}.${myConditionBeanClassName} ${glAttachedCBArgsVariableName}")

        #set ($myEntityVariableName = "${table.uncapitalisedJavaName}")
        #set ($myEntityListVariableName = "${table.uncapitalisedJavaName}List")
        #set ($myCBVariableName = "${table.uncapitalisedJavaName}")
        #set ($myBehaviorVariableName = "${table.uncapitalisedJavaName}Bhv")

        ##
        ## Determination
        ##
        #set ($isExistBehavior = false)
        #set ($isExistBehavior = true)
        #set ($isExistDao = true)
        #set ($isExistConditionBean = true)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseBhv})}${myBaseBhvClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsbhv/BaseBhv.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseEntity})}${myBaseObjectClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsentity/BaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseDBMeta})}${myDBMetaClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsentity/dbmeta/DBMetaImpl.${glTemplateFileExtension}",$path,"", "")

        #if (!$database.isStopGenerateExtendedBhv())
          #set ( $path = "${database.getPackageAsPath(${glPackageExtendedBhv})}${myExtendedBhvClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/exbhv/ExtendedBhv.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${glPackageExtendedEntity})}${myExtendedObjectClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/exentity/ExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseCB})}${myBaseConditionBeanClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/BsConditionBean.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseCQ})}${myAbstractBaseConditionQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/AbstractBsConditionQuery.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageCIQ})}${myConditionInlineQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/BsConditionInlineQuery.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseCQ})}${myBaseConditionQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/BsConditionQuery.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageNss})}${myNestSelectSetupperClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/NestSelectSetupper.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageCB})}${myConditionBeanClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $generator.parse("om/${glResourceDirectory}/cbean/ExConditionBean.${glTemplateFileExtension}", $path, "table", $table)
        #end

        #set ( $path = "${database.getPackageAsPath(${glPackageCQ})}${myConditionQueryClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $generator.parse("om/${glResourceDirectory}/cbean/ExConditionQuery.${glTemplateFileExtension}", $path, "table", $table)
        #end
      #end
    #end
    $database.info("* * * * * * * * * */")
    $database.info(" ")

    ## ===================================================================================
    ##                                                                          Simple Dto
    ##                                                                          ==========
    #if ($database.hasSimpleDtoDefinition() && $database.isTargetLanguageJava())
      $database.info("parseSimpleDto() {// mapper=$database.isSimpleDtoUseDtoMapper()")
      #set ($myDomainEntityPackageName = "${glPackageExtendedEntity}")
      #set ($myBaseEntityPackageName = "${database.simpleDtoBaseDtoPackage}")
      #set ($myExtendedEntityPackageName = "${database.simpleDtoExtendedDtoPackage}")
      #set ($myDtoMapperPackageName = "${database.simpleDtoDtoMapperPackage}")

      #set ($path = $database.getPackageAsPath(${myBaseEntityPackageName}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${myExtendedEntityPackageName}))
      $database.makeDirectory($path)

      #if ($database.isSimpleDtoUseDtoMapper())
        #set ($path = $database.getPackageAsPath(${myDtoMapperPackageName}))
        $database.makeDirectory($path)
      #end

      #foreach ($table in $database.tables)
        #set ($myBaseObjectClassName = "${database.simpleDtoBaseDtoPrefix}${table.javaName}${database.simpleDtoBaseDtoSuffix}")
        #set ($myExtendedObjectClassName = "${database.simpleDtoExtendedDtoPrefix}${table.javaName}${database.simpleDtoExtendedDtoSuffix}")
        #set ($myDtoMapperClassName = "${myExtendedObjectClassName}Mapper")

        $database.info("    parse('${myExtendedObjectClassName}');")

        #set ( $path = "${database.getPackageAsPath(${myBaseEntityPackageName})}${myBaseObjectClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/other/simpledto/SimpleDtoBaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${myExtendedEntityPackageName})}${myExtendedObjectClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/other/simpledto/SimpleDtoExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #if ($database.isSimpleDtoUseDtoMapper())
          #set ( $path = "${database.getPackageAsPath(${myDtoMapperPackageName})}${myDtoMapperClassName}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/other/simpledto/mapper/SimpleDtoMapper.${glTemplateFileExtension}", $path, "table", $table)
        #end
      #end
      $database.info("}")
    #end

    ## ===================================================================================
    ##                                                                            Flex Dto
    ##                                                                            ========
    #if ($database.hasFlexDtoDefinition() && $database.isTargetLanguageJava())
      $database.enableFlexDtoOutputDirectory()
      $database.info("parseFlexDto() {")
      #set ($myBaseEntityPackageName = "${database.flexDtoBaseDtoPackage}")
      #set ($myExtendedEntityPackageName = "${database.flexDtoExtendedDtoPackage}")

      #set ($path = $database.getPackageAsPath(${myBaseEntityPackageName}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${myExtendedEntityPackageName}))
      $database.makeDirectory($path)

      #foreach ($table in $database.tables)
        #set ($myBaseObjectClassName = "${database.flexDtoBaseDtoPrefix}${table.javaName}${database.flexDtoBaseDtoSuffix}")
        #set ($myExtendedObjectClassName = "${database.flexDtoExtendedDtoPrefix}${table.javaName}${database.flexDtoExtendedDtoSuffix}")
        #set ($myRemoteSimpleDtoClassName = "${database.simpleDtoExtendedDtoPackage}.${myExtendedObjectClassName}")

        $database.info("    parse('${myExtendedObjectClassName}');")

        #set ( $path = "${database.getPackageAsPath(${myBaseEntityPackageName})}${myBaseObjectClassName}.as" )
        $generator.parse("om/${glResourceDirectory}/other/flexdto/FlexDtoBaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${myExtendedEntityPackageName})}${myExtendedObjectClassName}.as" )
          #if ($database.isFlexDtoOverrideExtended() || !$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/other/flexdto/FlexDtoExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end
      #end
      $database.info("}")
	  $database.enableGenerateOutputDirectory()
    #end

  #end
#end

