${database.allClassCopyright}package ${glPackageBaseCommonCOption};

#set ($myClassName = "${glSimpleStringOption}")

import ${glPackageBaseCommonCOptionParts}.${glSplitOptionParts};
import ${glPackageBaseCommonCOptionParts}.${glToUpperLowerCaseOptionParts};
import ${glPackageBaseCommonCOptionParts}.${glToSingleByteOptionParts};
import ${glPackageBaseCommonCOptionPartsLocal}.${glJapaneseOptionPartsAgent};
import ${glPackageBaseCommonUtil}.${glSimpleStringUtil};

/**
 * The class of simple-string-option.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} implements ${glConditionOption} {

    protected ${glSplitOptionParts} _splitOptionParts;
    protected ${glToUpperLowerCaseOptionParts} _toUpperLowerCaseOptionParts;
    protected ${glToSingleByteOptionParts} _toSingleByteCaseOptionParts;
    protected ${glJapaneseOptionPartsAgent} _japaneseOptionPartsAgent;

    // =====================================================================================
    //                                                                           Rear Option
    //                                                                           ===========
    public String getRearOption() {
        return "";
    }

    // =====================================================================================
    //                                                                                 Split
    //                                                                                 =====
    protected ${myClassName} doSplitBySpace() {
        getSplitOptionParts().splitBySpace();
        return this;
    }

    protected ${myClassName} doSplitBySpace(int splitLimitCount) {
        getSplitOptionParts().splitBySpace(splitLimitCount);
        return this;
    }

    protected ${myClassName} doSplitBySpaceContainsDoubleByte() {
        getSplitOptionParts().splitBySpaceContainsDoubleByte();
        return this;
    }

    protected ${myClassName} doSplitBySpaceContainsDoubleByte(int splitLimitCount) {
        getSplitOptionParts().splitBySpaceContainsDoubleByte(splitLimitCount);
        return this;
    }

    protected ${myClassName} doSplitByPipeLine() {
        getSplitOptionParts().splitByPipeLine();
        return this;
    }

    protected ${myClassName} doSplitByPipeLine(int splitLimitCount) {
        getSplitOptionParts().splitByPipeLine(splitLimitCount);
        return this;
    }

    protected ${glSplitOptionParts} getSplitOptionParts() {
        if (_splitOptionParts == null) {
            _splitOptionParts = new ${glSplitOptionParts}();
        }
        return _splitOptionParts;
    }

    public boolean isSplit() {
        return getSplitOptionParts().isSplit();
    }

    public String[] generateSplitValueArray(String value) {
        return getSplitOptionParts().generateSplitValueArray(value);
    }

    // =====================================================================================
    //                                                                   To Upper/Lower Case
    //                                                                   ===================
    protected ${myClassName} doToUpperCase() {
        getToUpperLowerCaseOptionParts().toUpperCase();
        return this;
    }

    protected ${myClassName} doToLowerCase() {
        getToUpperLowerCaseOptionParts().toLowerCase();
        return this;
    }

    protected ${glToUpperLowerCaseOptionParts} getToUpperLowerCaseOptionParts() {
        if (_toUpperLowerCaseOptionParts == null) {
            _toUpperLowerCaseOptionParts = new ${glToUpperLowerCaseOptionParts}();
        }
        return _toUpperLowerCaseOptionParts;
    }

    // =====================================================================================
    //                                                                        To Single Byte
    //                                                                        ==============
    protected ${myClassName} doToSingleByteSpace() {
        getToSingleByteOptionParts().toSingleByteSpace();
        return this;
    }

    protected ${myClassName} doToSingleByteAlphabetNumber() {
        getToSingleByteOptionParts().toSingleByteAlphabetNumber();
        return this;
    }

    protected ${myClassName} doToSingleByteAlphabetNumberMark() {
        getToSingleByteOptionParts().toSingleByteAlphabetNumberMark();
        return this;
    }

    protected ${glToSingleByteOptionParts} getToSingleByteOptionParts() {
        if (_toSingleByteCaseOptionParts == null) {
            _toSingleByteCaseOptionParts = new ${glToSingleByteOptionParts}();
        }
        return _toSingleByteCaseOptionParts;
    }

    // =====================================================================================
    //                                                                        To Double Byte
    //                                                                        ==============

    // =====================================================================================
    //                                                                              Japanese
    //                                                                              ========
    protected ${glJapaneseOptionPartsAgent} doLocalJapanese() {
        return getJapaneseOptionPartsAgent();
    }

    protected ${glJapaneseOptionPartsAgent} getJapaneseOptionPartsAgent() {
        if (_japaneseOptionPartsAgent == null) {
            _japaneseOptionPartsAgent = new ${glJapaneseOptionPartsAgent}();
        }
        return _japaneseOptionPartsAgent;
    }

    // =====================================================================================
    //                                                                            Real Value
    //                                                                            ==========
    public String generateRealValue(String value) {
        value = getToUpperLowerCaseOptionParts().generateRealValue(value);
        value = getToSingleByteOptionParts().generateRealValue(value);
        value = getJapaneseOptionPartsAgent().generateRealValue(value);
        return value;
    }

    // =====================================================================================
    //                                                                        General Helper
    //                                                                        ==============
    protected String replace(String text, String fromText, String toText) {
	    return ${glSimpleStringUtil}.replace(text, fromText, toText);
    }

    // =====================================================================================
    //                                                                              DeepCopy
    //                                                                              ========
    public Object createDeepCopy() {
        final ${myClassName} deepCopy = newDeepCopyInstance();
        deepCopy._splitOptionParts = _splitOptionParts != null ? (${glSplitOptionParts})_splitOptionParts.createDeepCopy() : null;
        deepCopy._toUpperLowerCaseOptionParts = _toUpperLowerCaseOptionParts != null ? (${glToUpperLowerCaseOptionParts})_toUpperLowerCaseOptionParts.createDeepCopy() : null;
        deepCopy._toSingleByteCaseOptionParts = _toSingleByteCaseOptionParts != null ? (${glToSingleByteOptionParts})_toSingleByteCaseOptionParts.createDeepCopy() : null;
        deepCopy._japaneseOptionPartsAgent = _japaneseOptionPartsAgent != null ? (${glJapaneseOptionPartsAgent})_japaneseOptionPartsAgent.createDeepCopy() : null;
        return deepCopy;
    }
    protected ${myClassName} newDeepCopyInstance() {
        return new ${myClassName}();
    }
}
